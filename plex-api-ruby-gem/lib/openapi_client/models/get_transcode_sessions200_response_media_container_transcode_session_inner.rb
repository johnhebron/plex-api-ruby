=begin
#Plex-API

#An Open API Spec for interacting with Plex.tv and Plex Servers

The version of the OpenAPI document: 0.0.3
Contact: Lukeslakemail@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  class GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner
    attr_accessor :key

    attr_accessor :throttled

    attr_accessor :complete

    attr_accessor :progress

    attr_accessor :size

    attr_accessor :speed

    attr_accessor :error

    attr_accessor :duration

    attr_accessor :context

    attr_accessor :source_video_codec

    attr_accessor :source_audio_codec

    attr_accessor :video_decision

    attr_accessor :audio_decision

    attr_accessor :protocol

    attr_accessor :container

    attr_accessor :video_codec

    attr_accessor :audio_codec

    attr_accessor :audio_channels

    attr_accessor :transcode_hw_requested

    attr_accessor :time_stamp

    attr_accessor :max_offset_available

    attr_accessor :min_offset_available

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'key' => :'key',
        :'throttled' => :'throttled',
        :'complete' => :'complete',
        :'progress' => :'progress',
        :'size' => :'size',
        :'speed' => :'speed',
        :'error' => :'error',
        :'duration' => :'duration',
        :'context' => :'context',
        :'source_video_codec' => :'sourceVideoCodec',
        :'source_audio_codec' => :'sourceAudioCodec',
        :'video_decision' => :'videoDecision',
        :'audio_decision' => :'audioDecision',
        :'protocol' => :'protocol',
        :'container' => :'container',
        :'video_codec' => :'videoCodec',
        :'audio_codec' => :'audioCodec',
        :'audio_channels' => :'audioChannels',
        :'transcode_hw_requested' => :'transcodeHwRequested',
        :'time_stamp' => :'timeStamp',
        :'max_offset_available' => :'maxOffsetAvailable',
        :'min_offset_available' => :'minOffsetAvailable'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'key' => :'String',
        :'throttled' => :'Boolean',
        :'complete' => :'Boolean',
        :'progress' => :'Float',
        :'size' => :'Float',
        :'speed' => :'Float',
        :'error' => :'Boolean',
        :'duration' => :'Float',
        :'context' => :'String',
        :'source_video_codec' => :'String',
        :'source_audio_codec' => :'String',
        :'video_decision' => :'String',
        :'audio_decision' => :'String',
        :'protocol' => :'String',
        :'container' => :'String',
        :'video_codec' => :'String',
        :'audio_codec' => :'String',
        :'audio_channels' => :'Float',
        :'transcode_hw_requested' => :'Boolean',
        :'time_stamp' => :'Float',
        :'max_offset_available' => :'Float',
        :'min_offset_available' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::GetTranscodeSessions200ResponseMediaContainerTranscodeSessionInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'key')
        self.key = attributes[:'key']
      end

      if attributes.key?(:'throttled')
        self.throttled = attributes[:'throttled']
      end

      if attributes.key?(:'complete')
        self.complete = attributes[:'complete']
      end

      if attributes.key?(:'progress')
        self.progress = attributes[:'progress']
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.key?(:'speed')
        self.speed = attributes[:'speed']
      end

      if attributes.key?(:'error')
        self.error = attributes[:'error']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'context')
        self.context = attributes[:'context']
      end

      if attributes.key?(:'source_video_codec')
        self.source_video_codec = attributes[:'source_video_codec']
      end

      if attributes.key?(:'source_audio_codec')
        self.source_audio_codec = attributes[:'source_audio_codec']
      end

      if attributes.key?(:'video_decision')
        self.video_decision = attributes[:'video_decision']
      end

      if attributes.key?(:'audio_decision')
        self.audio_decision = attributes[:'audio_decision']
      end

      if attributes.key?(:'protocol')
        self.protocol = attributes[:'protocol']
      end

      if attributes.key?(:'container')
        self.container = attributes[:'container']
      end

      if attributes.key?(:'video_codec')
        self.video_codec = attributes[:'video_codec']
      end

      if attributes.key?(:'audio_codec')
        self.audio_codec = attributes[:'audio_codec']
      end

      if attributes.key?(:'audio_channels')
        self.audio_channels = attributes[:'audio_channels']
      end

      if attributes.key?(:'transcode_hw_requested')
        self.transcode_hw_requested = attributes[:'transcode_hw_requested']
      end

      if attributes.key?(:'time_stamp')
        self.time_stamp = attributes[:'time_stamp']
      end

      if attributes.key?(:'max_offset_available')
        self.max_offset_available = attributes[:'max_offset_available']
      end

      if attributes.key?(:'min_offset_available')
        self.min_offset_available = attributes[:'min_offset_available']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          key == o.key &&
          throttled == o.throttled &&
          complete == o.complete &&
          progress == o.progress &&
          size == o.size &&
          speed == o.speed &&
          error == o.error &&
          duration == o.duration &&
          context == o.context &&
          source_video_codec == o.source_video_codec &&
          source_audio_codec == o.source_audio_codec &&
          video_decision == o.video_decision &&
          audio_decision == o.audio_decision &&
          protocol == o.protocol &&
          container == o.container &&
          video_codec == o.video_codec &&
          audio_codec == o.audio_codec &&
          audio_channels == o.audio_channels &&
          transcode_hw_requested == o.transcode_hw_requested &&
          time_stamp == o.time_stamp &&
          max_offset_available == o.max_offset_available &&
          min_offset_available == o.min_offset_available
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [key, throttled, complete, progress, size, speed, error, duration, context, source_video_codec, source_audio_codec, video_decision, audio_decision, protocol, container, video_codec, audio_codec, audio_channels, transcode_hw_requested, time_stamp, max_offset_available, min_offset_available].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
