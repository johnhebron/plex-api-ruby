=begin
#Plex-API

#An Open API Spec for interacting with Plex.tv and Plex Servers

The version of the OpenAPI document: 0.0.3
Contact: Lukeslakemail@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module OpenapiClient
  class PlaylistsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adding to a Playlist
    # Adds a generator to a playlist, same parameters as the POST to create. With a dumb playlist, this adds the specified items to the playlist. With a smart playlist, passing a new `uri` parameter replaces the rules for the playlist. Returns the playlist. 
    # @param playlist_id [Float] the ID of the playlist
    # @param uri [String] the content URI for the playlist
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :play_queue_id the play queue to add to a playlist
    # @return [AddPlaylistContents200Response]
    def add_playlist_contents(playlist_id, uri, opts = {})
      data, _status_code, _headers = add_playlist_contents_with_http_info(playlist_id, uri, opts)
      data
    end

    # Adding to a Playlist
    # Adds a generator to a playlist, same parameters as the POST to create. With a dumb playlist, this adds the specified items to the playlist. With a smart playlist, passing a new &#x60;uri&#x60; parameter replaces the rules for the playlist. Returns the playlist. 
    # @param playlist_id [Float] the ID of the playlist
    # @param uri [String] the content URI for the playlist
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :play_queue_id the play queue to add to a playlist
    # @return [Array<(AddPlaylistContents200Response, Integer, Hash)>] AddPlaylistContents200Response data, response status code and response headers
    def add_playlist_contents_with_http_info(playlist_id, uri, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlaylistsApi.add_playlist_contents ...'
      end
      # verify the required parameter 'playlist_id' is set
      if @api_client.config.client_side_validation && playlist_id.nil?
        fail ArgumentError, "Missing the required parameter 'playlist_id' when calling PlaylistsApi.add_playlist_contents"
      end
      # verify the required parameter 'uri' is set
      if @api_client.config.client_side_validation && uri.nil?
        fail ArgumentError, "Missing the required parameter 'uri' when calling PlaylistsApi.add_playlist_contents"
      end
      # resource path
      local_var_path = '/playlists/{playlistID}/items'.sub('{' + 'playlistID' + '}', CGI.escape(playlist_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'uri'] = uri
      query_params[:'playQueueID'] = opts[:'play_queue_id'] if !opts[:'play_queue_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AddPlaylistContents200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"PlaylistsApi.add_playlist_contents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlaylistsApi#add_playlist_contents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Playlist Contents
    # Clears a playlist, only works with dumb playlists. Returns the playlist. 
    # @param playlist_id [Float] the ID of the playlist
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clear_playlist_contents(playlist_id, opts = {})
      clear_playlist_contents_with_http_info(playlist_id, opts)
      nil
    end

    # Delete Playlist Contents
    # Clears a playlist, only works with dumb playlists. Returns the playlist. 
    # @param playlist_id [Float] the ID of the playlist
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clear_playlist_contents_with_http_info(playlist_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlaylistsApi.clear_playlist_contents ...'
      end
      # verify the required parameter 'playlist_id' is set
      if @api_client.config.client_side_validation && playlist_id.nil?
        fail ArgumentError, "Missing the required parameter 'playlist_id' when calling PlaylistsApi.clear_playlist_contents"
      end
      # resource path
      local_var_path = '/playlists/{playlistID}/items'.sub('{' + 'playlistID' + '}', CGI.escape(playlist_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"PlaylistsApi.clear_playlist_contents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlaylistsApi#clear_playlist_contents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Playlist
    # Create a new playlist. By default the playlist is blank. To create a playlist along with a first item, pass: - `uri` - The content URI for what we're playing (e.g. `server://1234/com.plexapp.plugins.library/library/metadata/1`). - `playQueueID` - To create a playlist from an existing play queue. 
    # @param title [String] name of the playlist
    # @param type [String] type of playlist to create
    # @param smart [Integer] whether the playlist is smart or not
    # @param uri [String] the content URI for the playlist
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :play_queue_id the play queue to copy to a playlist
    # @return [CreatePlaylist200Response]
    def create_playlist(title, type, smart, uri, opts = {})
      data, _status_code, _headers = create_playlist_with_http_info(title, type, smart, uri, opts)
      data
    end

    # Create a Playlist
    # Create a new playlist. By default the playlist is blank. To create a playlist along with a first item, pass: - &#x60;uri&#x60; - The content URI for what we&#39;re playing (e.g. &#x60;server://1234/com.plexapp.plugins.library/library/metadata/1&#x60;). - &#x60;playQueueID&#x60; - To create a playlist from an existing play queue. 
    # @param title [String] name of the playlist
    # @param type [String] type of playlist to create
    # @param smart [Integer] whether the playlist is smart or not
    # @param uri [String] the content URI for the playlist
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :play_queue_id the play queue to copy to a playlist
    # @return [Array<(CreatePlaylist200Response, Integer, Hash)>] CreatePlaylist200Response data, response status code and response headers
    def create_playlist_with_http_info(title, type, smart, uri, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlaylistsApi.create_playlist ...'
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling PlaylistsApi.create_playlist"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling PlaylistsApi.create_playlist"
      end
      # verify enum value
      allowable_values = ["audio", "video", "photo"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'smart' is set
      if @api_client.config.client_side_validation && smart.nil?
        fail ArgumentError, "Missing the required parameter 'smart' when calling PlaylistsApi.create_playlist"
      end
      # verify enum value
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && !allowable_values.include?(smart)
        fail ArgumentError, "invalid value for \"smart\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'uri' is set
      if @api_client.config.client_side_validation && uri.nil?
        fail ArgumentError, "Missing the required parameter 'uri' when calling PlaylistsApi.create_playlist"
      end
      # resource path
      local_var_path = '/playlists'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'title'] = title
      query_params[:'type'] = type
      query_params[:'smart'] = smart
      query_params[:'uri'] = uri
      query_params[:'playQueueID'] = opts[:'play_queue_id'] if !opts[:'play_queue_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreatePlaylist200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"PlaylistsApi.create_playlist",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlaylistsApi#create_playlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a Playlist
    # This endpoint will delete a playlist 
    # @param playlist_id [Float] the ID of the playlist
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_playlist(playlist_id, opts = {})
      delete_playlist_with_http_info(playlist_id, opts)
      nil
    end

    # Deletes a Playlist
    # This endpoint will delete a playlist 
    # @param playlist_id [Float] the ID of the playlist
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_playlist_with_http_info(playlist_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlaylistsApi.delete_playlist ...'
      end
      # verify the required parameter 'playlist_id' is set
      if @api_client.config.client_side_validation && playlist_id.nil?
        fail ArgumentError, "Missing the required parameter 'playlist_id' when calling PlaylistsApi.delete_playlist"
      end
      # resource path
      local_var_path = '/playlists/{playlistID}'.sub('{' + 'playlistID' + '}', CGI.escape(playlist_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"PlaylistsApi.delete_playlist",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlaylistsApi#delete_playlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Playlist
    # Gets detailed metadata for a playlist. A playlist for many purposes (rating, editing metadata, tagging), can be treated like a regular metadata item: Smart playlist details contain the `content` attribute. This is the content URI for the generator. This can then be parsed by a client to provide smart playlist editing. 
    # @param playlist_id [Float] the ID of the playlist
    # @param [Hash] opts the optional parameters
    # @return [GetPlaylist200Response]
    def get_playlist(playlist_id, opts = {})
      data, _status_code, _headers = get_playlist_with_http_info(playlist_id, opts)
      data
    end

    # Retrieve Playlist
    # Gets detailed metadata for a playlist. A playlist for many purposes (rating, editing metadata, tagging), can be treated like a regular metadata item: Smart playlist details contain the &#x60;content&#x60; attribute. This is the content URI for the generator. This can then be parsed by a client to provide smart playlist editing. 
    # @param playlist_id [Float] the ID of the playlist
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPlaylist200Response, Integer, Hash)>] GetPlaylist200Response data, response status code and response headers
    def get_playlist_with_http_info(playlist_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlaylistsApi.get_playlist ...'
      end
      # verify the required parameter 'playlist_id' is set
      if @api_client.config.client_side_validation && playlist_id.nil?
        fail ArgumentError, "Missing the required parameter 'playlist_id' when calling PlaylistsApi.get_playlist"
      end
      # resource path
      local_var_path = '/playlists/{playlistID}'.sub('{' + 'playlistID' + '}', CGI.escape(playlist_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPlaylist200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"PlaylistsApi.get_playlist",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlaylistsApi#get_playlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Playlist Contents
    # Gets the contents of a playlist. Should be paged by clients via standard mechanisms.  By default leaves are returned (e.g. episodes, movies). In order to return other types you can use the `type` parameter.  For example, you could use this to display a list of recently added albums vis a smart playlist.  Note that for dumb playlists, items have a `playlistItemID` attribute which is used for deleting or moving items. 
    # @param playlist_id [Float] the ID of the playlist
    # @param type [Float] the metadata type of the item to return
    # @param [Hash] opts the optional parameters
    # @return [GetPlaylistContents200Response]
    def get_playlist_contents(playlist_id, type, opts = {})
      data, _status_code, _headers = get_playlist_contents_with_http_info(playlist_id, type, opts)
      data
    end

    # Retrieve Playlist Contents
    # Gets the contents of a playlist. Should be paged by clients via standard mechanisms.  By default leaves are returned (e.g. episodes, movies). In order to return other types you can use the &#x60;type&#x60; parameter.  For example, you could use this to display a list of recently added albums vis a smart playlist.  Note that for dumb playlists, items have a &#x60;playlistItemID&#x60; attribute which is used for deleting or moving items. 
    # @param playlist_id [Float] the ID of the playlist
    # @param type [Float] the metadata type of the item to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPlaylistContents200Response, Integer, Hash)>] GetPlaylistContents200Response data, response status code and response headers
    def get_playlist_contents_with_http_info(playlist_id, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlaylistsApi.get_playlist_contents ...'
      end
      # verify the required parameter 'playlist_id' is set
      if @api_client.config.client_side_validation && playlist_id.nil?
        fail ArgumentError, "Missing the required parameter 'playlist_id' when calling PlaylistsApi.get_playlist_contents"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling PlaylistsApi.get_playlist_contents"
      end
      # resource path
      local_var_path = '/playlists/{playlistID}/items'.sub('{' + 'playlistID' + '}', CGI.escape(playlist_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPlaylistContents200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"PlaylistsApi.get_playlist_contents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlaylistsApi#get_playlist_contents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get All Playlists
    # Get All Playlists given the specified filters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :playlist_type limit to a type of playlist.
    # @option opts [Integer] :smart type of playlists to return (default is all).
    # @return [GetPlaylists200Response]
    def get_playlists(opts = {})
      data, _status_code, _headers = get_playlists_with_http_info(opts)
      data
    end

    # Get All Playlists
    # Get All Playlists given the specified filters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :playlist_type limit to a type of playlist.
    # @option opts [Integer] :smart type of playlists to return (default is all).
    # @return [Array<(GetPlaylists200Response, Integer, Hash)>] GetPlaylists200Response data, response status code and response headers
    def get_playlists_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlaylistsApi.get_playlists ...'
      end
      allowable_values = ["audio", "video", "photo"]
      if @api_client.config.client_side_validation && opts[:'playlist_type'] && !allowable_values.include?(opts[:'playlist_type'])
        fail ArgumentError, "invalid value for \"playlist_type\", must be one of #{allowable_values}"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'smart'] && !allowable_values.include?(opts[:'smart'])
        fail ArgumentError, "invalid value for \"smart\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/playlists'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'playlistType'] = opts[:'playlist_type'] if !opts[:'playlist_type'].nil?
      query_params[:'smart'] = opts[:'smart'] if !opts[:'smart'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPlaylists200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"PlaylistsApi.get_playlists",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlaylistsApi#get_playlists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Playlist
    # From PMS version 1.9.1 clients can also edit playlist metadata using this endpoint as they would via `PUT /library/metadata/{playlistID}` 
    # @param playlist_id [Float] the ID of the playlist
    # @param [Hash] opts the optional parameters
    # @option opts [String] :title name of the playlist
    # @option opts [String] :summary summary description of the playlist
    # @return [nil]
    def update_playlist(playlist_id, opts = {})
      update_playlist_with_http_info(playlist_id, opts)
      nil
    end

    # Update a Playlist
    # From PMS version 1.9.1 clients can also edit playlist metadata using this endpoint as they would via &#x60;PUT /library/metadata/{playlistID}&#x60; 
    # @param playlist_id [Float] the ID of the playlist
    # @param [Hash] opts the optional parameters
    # @option opts [String] :title name of the playlist
    # @option opts [String] :summary summary description of the playlist
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_playlist_with_http_info(playlist_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlaylistsApi.update_playlist ...'
      end
      # verify the required parameter 'playlist_id' is set
      if @api_client.config.client_side_validation && playlist_id.nil?
        fail ArgumentError, "Missing the required parameter 'playlist_id' when calling PlaylistsApi.update_playlist"
      end
      # resource path
      local_var_path = '/playlists/{playlistID}'.sub('{' + 'playlistID' + '}', CGI.escape(playlist_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'title'] = opts[:'title'] if !opts[:'title'].nil?
      query_params[:'summary'] = opts[:'summary'] if !opts[:'summary'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"PlaylistsApi.update_playlist",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlaylistsApi#update_playlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload Playlist
    # Imports m3u playlists by passing a path on the server to scan for m3u-formatted playlist files, or a path to a single playlist file. 
    # @param path [String] absolute path to a directory on the server where m3u files are stored, or the absolute path to a playlist file on the server.  If the &#x60;path&#x60; argument is a directory, that path will be scanned for playlist files to be processed.  Each file in that directory creates a separate playlist, with a name based on the filename of the file that created it.  The GUID of each playlist is based on the filename.  If the &#x60;path&#x60; argument is a file, that file will be used to create a new playlist, with the name based on the filename of the file that created it.  The GUID of each playlist is based on the filename. 
    # @param force [Integer] Force overwriting of duplicate playlists.   By default, a playlist file uploaded with the same path will overwrite the existing playlist.  The &#x60;force&#x60; argument is used to disable overwriting.   If the &#x60;force&#x60; argument is set to 0, a new playlist will be created suffixed with the date and time that the duplicate was uploaded. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def upload_playlist(path, force, opts = {})
      upload_playlist_with_http_info(path, force, opts)
      nil
    end

    # Upload Playlist
    # Imports m3u playlists by passing a path on the server to scan for m3u-formatted playlist files, or a path to a single playlist file. 
    # @param path [String] absolute path to a directory on the server where m3u files are stored, or the absolute path to a playlist file on the server.  If the &#x60;path&#x60; argument is a directory, that path will be scanned for playlist files to be processed.  Each file in that directory creates a separate playlist, with a name based on the filename of the file that created it.  The GUID of each playlist is based on the filename.  If the &#x60;path&#x60; argument is a file, that file will be used to create a new playlist, with the name based on the filename of the file that created it.  The GUID of each playlist is based on the filename. 
    # @param force [Integer] Force overwriting of duplicate playlists.   By default, a playlist file uploaded with the same path will overwrite the existing playlist.  The &#x60;force&#x60; argument is used to disable overwriting.   If the &#x60;force&#x60; argument is set to 0, a new playlist will be created suffixed with the date and time that the duplicate was uploaded. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def upload_playlist_with_http_info(path, force, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlaylistsApi.upload_playlist ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling PlaylistsApi.upload_playlist"
      end
      # verify the required parameter 'force' is set
      if @api_client.config.client_side_validation && force.nil?
        fail ArgumentError, "Missing the required parameter 'force' when calling PlaylistsApi.upload_playlist"
      end
      # verify enum value
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && !allowable_values.include?(force)
        fail ArgumentError, "invalid value for \"force\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/playlists/upload'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'path'] = path
      query_params[:'force'] = force

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"PlaylistsApi.upload_playlist",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlaylistsApi#upload_playlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
