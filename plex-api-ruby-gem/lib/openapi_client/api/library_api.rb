=begin
#Plex-API

#An Open API Spec for interacting with Plex.tv and Plex Servers

The version of the OpenAPI document: 0.0.3
Contact: Lukeslakemail@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module OpenapiClient
  class LibraryApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete Library Section
    # Delate a library using a specific section
    # @param section_id [Float] the Id of the library to query
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_library(section_id, opts = {})
      delete_library_with_http_info(section_id, opts)
      nil
    end

    # Delete Library Section
    # Delate a library using a specific section
    # @param section_id [Float] the Id of the library to query
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_library_with_http_info(section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LibraryApi.delete_library ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling LibraryApi.delete_library"
      end
      # resource path
      local_var_path = '/library/sections/{sectionId}'.sub('{' + 'sectionId' + '}', CGI.escape(section_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"LibraryApi.delete_library",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LibraryApi#delete_library\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Hash Value
    # This resource returns hash values for local files
    # @param url [String] This is the path to the local file, must be prefixed by &#x60;file://&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :type Item type
    # @return [nil]
    def get_file_hash(url, opts = {})
      get_file_hash_with_http_info(url, opts)
      nil
    end

    # Get Hash Value
    # This resource returns hash values for local files
    # @param url [String] This is the path to the local file, must be prefixed by &#x60;file://&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :type Item type
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_file_hash_with_http_info(url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LibraryApi.get_file_hash ...'
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling LibraryApi.get_file_hash"
      end
      # resource path
      local_var_path = '/library/hashes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'url'] = url
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"LibraryApi.get_file_hash",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LibraryApi#get_file_hash\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get All Libraries
    # A library section (commonly referred to as just a library) is a collection of media.  Libraries are typed, and depending on their type provide either a flat or a hierarchical view of the media.  For example, a music library has an artist > albums > tracks structure, whereas a movie library is flat.  Libraries have features beyond just being a collection of media; for starters, they include information about supported types, filters and sorts.  This allows a client to provide a rich interface around the media (e.g. allow sorting movies by release year). 
    # @param [Hash] opts the optional parameters
    # @return [GetLibraries200Response]
    def get_libraries(opts = {})
      data, _status_code, _headers = get_libraries_with_http_info(opts)
      data
    end

    # Get All Libraries
    # A library section (commonly referred to as just a library) is a collection of media.  Libraries are typed, and depending on their type provide either a flat or a hierarchical view of the media.  For example, a music library has an artist &gt; albums &gt; tracks structure, whereas a movie library is flat.  Libraries have features beyond just being a collection of media; for starters, they include information about supported types, filters and sorts.  This allows a client to provide a rich interface around the media (e.g. allow sorting movies by release year). 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLibraries200Response, Integer, Hash)>] GetLibraries200Response data, response status code and response headers
    def get_libraries_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LibraryApi.get_libraries ...'
      end
      # resource path
      local_var_path = '/library/sections'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLibraries200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"LibraryApi.get_libraries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LibraryApi#get_libraries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Library Details
    # ## Library Details Endpoint  This endpoint provides comprehensive details about the library, focusing on organizational aspects rather than the content itself.     The details include:  ### Directories Organized into three categories:  - **Primary Directories**:    - Used in some clients for quick access to media subsets (e.g., \"All\", \"On Deck\").   - Most can be replicated via media queries.   - Customizable by users.  - **Secondary Directories**:   - Marked with `secondary=\"1\"`.   - Used in older clients for structured navigation.  - **Special Directories**:   - Includes a \"By Folder\" entry for filesystem-based browsing.   - Contains an obsolete `search=\"1\"` entry for on-the-fly search dialog creation.  ### Types Each type in the library comes with a set of filters and sorts, aiding in building dynamic media controls:  - **Type Object Attributes**:   - `key`: Endpoint for the media list of this type.   - `type`: Metadata type (if standard Plex type).   - `title`: Title for this content type (e.g., \"Movies\").  - **Filter Objects**:   - Subset of the media query language.   - Attributes include `filter` (name), `filterType` (data type), `key` (endpoint for value range), and `title`.  - **Sort Objects**:   - Description of sort fields.   - Attributes include `defaultDirection` (asc/desc), `descKey` and `key` (sort parameters), and `title`.  > **Note**: Filters and sorts are optional; without them, no filtering controls are rendered. 
    # @param section_id [Float] the Id of the library to query
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :include_details Whether or not to include details for a section (types, filters, and sorts).  Only exists for backwards compatibility, media providers other than the server libraries have it on always.  (default to 0)
    # @return [GetLibrary200Response]
    def get_library(section_id, opts = {})
      data, _status_code, _headers = get_library_with_http_info(section_id, opts)
      data
    end

    # Get Library Details
    # ## Library Details Endpoint  This endpoint provides comprehensive details about the library, focusing on organizational aspects rather than the content itself.     The details include:  ### Directories Organized into three categories:  - **Primary Directories**:    - Used in some clients for quick access to media subsets (e.g., \&quot;All\&quot;, \&quot;On Deck\&quot;).   - Most can be replicated via media queries.   - Customizable by users.  - **Secondary Directories**:   - Marked with &#x60;secondary&#x3D;\&quot;1\&quot;&#x60;.   - Used in older clients for structured navigation.  - **Special Directories**:   - Includes a \&quot;By Folder\&quot; entry for filesystem-based browsing.   - Contains an obsolete &#x60;search&#x3D;\&quot;1\&quot;&#x60; entry for on-the-fly search dialog creation.  ### Types Each type in the library comes with a set of filters and sorts, aiding in building dynamic media controls:  - **Type Object Attributes**:   - &#x60;key&#x60;: Endpoint for the media list of this type.   - &#x60;type&#x60;: Metadata type (if standard Plex type).   - &#x60;title&#x60;: Title for this content type (e.g., \&quot;Movies\&quot;).  - **Filter Objects**:   - Subset of the media query language.   - Attributes include &#x60;filter&#x60; (name), &#x60;filterType&#x60; (data type), &#x60;key&#x60; (endpoint for value range), and &#x60;title&#x60;.  - **Sort Objects**:   - Description of sort fields.   - Attributes include &#x60;defaultDirection&#x60; (asc/desc), &#x60;descKey&#x60; and &#x60;key&#x60; (sort parameters), and &#x60;title&#x60;.  &gt; **Note**: Filters and sorts are optional; without them, no filtering controls are rendered. 
    # @param section_id [Float] the Id of the library to query
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :include_details Whether or not to include details for a section (types, filters, and sorts).  Only exists for backwards compatibility, media providers other than the server libraries have it on always.  (default to 0)
    # @return [Array<(GetLibrary200Response, Integer, Hash)>] GetLibrary200Response data, response status code and response headers
    def get_library_with_http_info(section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LibraryApi.get_library ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling LibraryApi.get_library"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'include_details'] && !allowable_values.include?(opts[:'include_details'])
        fail ArgumentError, "invalid value for \"include_details\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/library/sections/{sectionId}'.sub('{' + 'sectionId' + '}', CGI.escape(section_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeDetails'] = opts[:'include_details'] if !opts[:'include_details'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLibrary200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"LibraryApi.get_library",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LibraryApi#get_library\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Items Metadata
    # This endpoint will return the metadata of a library item specified with the ratingKey. 
    # @param rating_key [Float] the id of the library item to return the children of.
    # @param [Hash] opts the optional parameters
    # @return [GetMetadata200Response]
    def get_metadata(rating_key, opts = {})
      data, _status_code, _headers = get_metadata_with_http_info(rating_key, opts)
      data
    end

    # Get Items Metadata
    # This endpoint will return the metadata of a library item specified with the ratingKey. 
    # @param rating_key [Float] the id of the library item to return the children of.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMetadata200Response, Integer, Hash)>] GetMetadata200Response data, response status code and response headers
    def get_metadata_with_http_info(rating_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LibraryApi.get_metadata ...'
      end
      # verify the required parameter 'rating_key' is set
      if @api_client.config.client_side_validation && rating_key.nil?
        fail ArgumentError, "Missing the required parameter 'rating_key' when calling LibraryApi.get_metadata"
      end
      # resource path
      local_var_path = '/library/metadata/{ratingKey}'.sub('{' + 'ratingKey' + '}', CGI.escape(rating_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMetadata200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"LibraryApi.get_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LibraryApi#get_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Items Children
    # This endpoint will return the children of of a library item specified with the ratingKey. 
    # @param rating_key [Float] the id of the library item to return the children of.
    # @param [Hash] opts the optional parameters
    # @return [GetMetadataChildren200Response]
    def get_metadata_children(rating_key, opts = {})
      data, _status_code, _headers = get_metadata_children_with_http_info(rating_key, opts)
      data
    end

    # Get Items Children
    # This endpoint will return the children of of a library item specified with the ratingKey. 
    # @param rating_key [Float] the id of the library item to return the children of.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMetadataChildren200Response, Integer, Hash)>] GetMetadataChildren200Response data, response status code and response headers
    def get_metadata_children_with_http_info(rating_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LibraryApi.get_metadata_children ...'
      end
      # verify the required parameter 'rating_key' is set
      if @api_client.config.client_side_validation && rating_key.nil?
        fail ArgumentError, "Missing the required parameter 'rating_key' when calling LibraryApi.get_metadata_children"
      end
      # resource path
      local_var_path = '/library/metadata/{ratingKey}/children'.sub('{' + 'ratingKey' + '}', CGI.escape(rating_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMetadataChildren200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"LibraryApi.get_metadata_children",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LibraryApi#get_metadata_children\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get On Deck
    # This endpoint will return the on deck content. 
    # @param [Hash] opts the optional parameters
    # @return [GetOnDeck200Response]
    def get_on_deck(opts = {})
      data, _status_code, _headers = get_on_deck_with_http_info(opts)
      data
    end

    # Get On Deck
    # This endpoint will return the on deck content. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetOnDeck200Response, Integer, Hash)>] GetOnDeck200Response data, response status code and response headers
    def get_on_deck_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LibraryApi.get_on_deck ...'
      end
      # resource path
      local_var_path = '/library/onDeck'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOnDeck200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"LibraryApi.get_on_deck",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LibraryApi#get_on_deck\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Recently Added
    # This endpoint will return the recently added content. 
    # @param [Hash] opts the optional parameters
    # @return [GetRecentlyAdded200Response]
    def get_recently_added(opts = {})
      data, _status_code, _headers = get_recently_added_with_http_info(opts)
      data
    end

    # Get Recently Added
    # This endpoint will return the recently added content. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetRecentlyAdded200Response, Integer, Hash)>] GetRecentlyAdded200Response data, response status code and response headers
    def get_recently_added_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LibraryApi.get_recently_added ...'
      end
      # resource path
      local_var_path = '/library/recentlyAdded'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRecentlyAdded200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"LibraryApi.get_recently_added",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LibraryApi#get_recently_added\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh Library
    # This endpoint Refreshes the library. 
    # @param section_id [Float] the Id of the library to refresh
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def refresh_library(section_id, opts = {})
      refresh_library_with_http_info(section_id, opts)
      nil
    end

    # Refresh Library
    # This endpoint Refreshes the library. 
    # @param section_id [Float] the Id of the library to refresh
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def refresh_library_with_http_info(section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LibraryApi.refresh_library ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling LibraryApi.refresh_library"
      end
      # resource path
      local_var_path = '/library/sections/{sectionId}/refresh'.sub('{' + 'sectionId' + '}', CGI.escape(section_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"LibraryApi.refresh_library",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LibraryApi#refresh_library\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
