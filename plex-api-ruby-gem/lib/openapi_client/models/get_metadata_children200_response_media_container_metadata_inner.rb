=begin
#Plex-API

#An Open API Spec for interacting with Plex.tv and Plex Servers

The version of the OpenAPI document: 0.0.3
Contact: Lukeslakemail@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  class GetMetadataChildren200ResponseMediaContainerMetadataInner
    attr_accessor :rating_key

    attr_accessor :key

    attr_accessor :parent_rating_key

    attr_accessor :guid

    attr_accessor :parent_guid

    attr_accessor :parent_studio

    attr_accessor :type

    attr_accessor :title

    attr_accessor :parent_key

    attr_accessor :parent_title

    attr_accessor :summary

    attr_accessor :index

    attr_accessor :parent_index

    attr_accessor :view_count

    attr_accessor :last_viewed_at

    attr_accessor :parent_year

    attr_accessor :thumb

    attr_accessor :art

    attr_accessor :parent_thumb

    attr_accessor :parent_theme

    attr_accessor :leaf_count

    attr_accessor :viewed_leaf_count

    attr_accessor :added_at

    attr_accessor :updated_at

    attr_accessor :user_rating

    attr_accessor :skip_count

    attr_accessor :last_rated_at

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'rating_key' => :'ratingKey',
        :'key' => :'key',
        :'parent_rating_key' => :'parentRatingKey',
        :'guid' => :'guid',
        :'parent_guid' => :'parentGuid',
        :'parent_studio' => :'parentStudio',
        :'type' => :'type',
        :'title' => :'title',
        :'parent_key' => :'parentKey',
        :'parent_title' => :'parentTitle',
        :'summary' => :'summary',
        :'index' => :'index',
        :'parent_index' => :'parentIndex',
        :'view_count' => :'viewCount',
        :'last_viewed_at' => :'lastViewedAt',
        :'parent_year' => :'parentYear',
        :'thumb' => :'thumb',
        :'art' => :'art',
        :'parent_thumb' => :'parentThumb',
        :'parent_theme' => :'parentTheme',
        :'leaf_count' => :'leafCount',
        :'viewed_leaf_count' => :'viewedLeafCount',
        :'added_at' => :'addedAt',
        :'updated_at' => :'updatedAt',
        :'user_rating' => :'userRating',
        :'skip_count' => :'skipCount',
        :'last_rated_at' => :'lastRatedAt'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'rating_key' => :'String',
        :'key' => :'String',
        :'parent_rating_key' => :'String',
        :'guid' => :'String',
        :'parent_guid' => :'String',
        :'parent_studio' => :'String',
        :'type' => :'String',
        :'title' => :'String',
        :'parent_key' => :'String',
        :'parent_title' => :'String',
        :'summary' => :'String',
        :'index' => :'Integer',
        :'parent_index' => :'Integer',
        :'view_count' => :'Integer',
        :'last_viewed_at' => :'Integer',
        :'parent_year' => :'Integer',
        :'thumb' => :'String',
        :'art' => :'String',
        :'parent_thumb' => :'String',
        :'parent_theme' => :'String',
        :'leaf_count' => :'Integer',
        :'viewed_leaf_count' => :'Integer',
        :'added_at' => :'Integer',
        :'updated_at' => :'Integer',
        :'user_rating' => :'Integer',
        :'skip_count' => :'Integer',
        :'last_rated_at' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::GetMetadataChildren200ResponseMediaContainerMetadataInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::GetMetadataChildren200ResponseMediaContainerMetadataInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'rating_key')
        self.rating_key = attributes[:'rating_key']
      end

      if attributes.key?(:'key')
        self.key = attributes[:'key']
      end

      if attributes.key?(:'parent_rating_key')
        self.parent_rating_key = attributes[:'parent_rating_key']
      end

      if attributes.key?(:'guid')
        self.guid = attributes[:'guid']
      end

      if attributes.key?(:'parent_guid')
        self.parent_guid = attributes[:'parent_guid']
      end

      if attributes.key?(:'parent_studio')
        self.parent_studio = attributes[:'parent_studio']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'parent_key')
        self.parent_key = attributes[:'parent_key']
      end

      if attributes.key?(:'parent_title')
        self.parent_title = attributes[:'parent_title']
      end

      if attributes.key?(:'summary')
        self.summary = attributes[:'summary']
      end

      if attributes.key?(:'index')
        self.index = attributes[:'index']
      end

      if attributes.key?(:'parent_index')
        self.parent_index = attributes[:'parent_index']
      end

      if attributes.key?(:'view_count')
        self.view_count = attributes[:'view_count']
      end

      if attributes.key?(:'last_viewed_at')
        self.last_viewed_at = attributes[:'last_viewed_at']
      end

      if attributes.key?(:'parent_year')
        self.parent_year = attributes[:'parent_year']
      end

      if attributes.key?(:'thumb')
        self.thumb = attributes[:'thumb']
      end

      if attributes.key?(:'art')
        self.art = attributes[:'art']
      end

      if attributes.key?(:'parent_thumb')
        self.parent_thumb = attributes[:'parent_thumb']
      end

      if attributes.key?(:'parent_theme')
        self.parent_theme = attributes[:'parent_theme']
      end

      if attributes.key?(:'leaf_count')
        self.leaf_count = attributes[:'leaf_count']
      end

      if attributes.key?(:'viewed_leaf_count')
        self.viewed_leaf_count = attributes[:'viewed_leaf_count']
      end

      if attributes.key?(:'added_at')
        self.added_at = attributes[:'added_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'user_rating')
        self.user_rating = attributes[:'user_rating']
      end

      if attributes.key?(:'skip_count')
        self.skip_count = attributes[:'skip_count']
      end

      if attributes.key?(:'last_rated_at')
        self.last_rated_at = attributes[:'last_rated_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          rating_key == o.rating_key &&
          key == o.key &&
          parent_rating_key == o.parent_rating_key &&
          guid == o.guid &&
          parent_guid == o.parent_guid &&
          parent_studio == o.parent_studio &&
          type == o.type &&
          title == o.title &&
          parent_key == o.parent_key &&
          parent_title == o.parent_title &&
          summary == o.summary &&
          index == o.index &&
          parent_index == o.parent_index &&
          view_count == o.view_count &&
          last_viewed_at == o.last_viewed_at &&
          parent_year == o.parent_year &&
          thumb == o.thumb &&
          art == o.art &&
          parent_thumb == o.parent_thumb &&
          parent_theme == o.parent_theme &&
          leaf_count == o.leaf_count &&
          viewed_leaf_count == o.viewed_leaf_count &&
          added_at == o.added_at &&
          updated_at == o.updated_at &&
          user_rating == o.user_rating &&
          skip_count == o.skip_count &&
          last_rated_at == o.last_rated_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [rating_key, key, parent_rating_key, guid, parent_guid, parent_studio, type, title, parent_key, parent_title, summary, index, parent_index, view_count, last_viewed_at, parent_year, thumb, art, parent_thumb, parent_theme, leaf_count, viewed_leaf_count, added_at, updated_at, user_rating, skip_count, last_rated_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
