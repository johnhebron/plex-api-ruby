=begin
#Plex-API

#An Open API Spec for interacting with Plex.tv and Plex Servers

The version of the OpenAPI document: 0.0.3
Contact: Lukeslakemail@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module OpenapiClient
  class ActivitiesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel Server Activities
    # Cancel Server Activities
    # @param activity_uuid [String] The UUID of the activity to cancel.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cancel_server_activities(activity_uuid, opts = {})
      cancel_server_activities_with_http_info(activity_uuid, opts)
      nil
    end

    # Cancel Server Activities
    # Cancel Server Activities
    # @param activity_uuid [String] The UUID of the activity to cancel.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def cancel_server_activities_with_http_info(activity_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActivitiesApi.cancel_server_activities ...'
      end
      # verify the required parameter 'activity_uuid' is set
      if @api_client.config.client_side_validation && activity_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'activity_uuid' when calling ActivitiesApi.cancel_server_activities"
      end
      # resource path
      local_var_path = '/activities/{activityUUID}'.sub('{' + 'activityUUID' + '}', CGI.escape(activity_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"ActivitiesApi.cancel_server_activities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivitiesApi#cancel_server_activities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Server Activities
    # Get Server Activities
    # @param [Hash] opts the optional parameters
    # @return [GetServerActivities200Response]
    def get_server_activities(opts = {})
      data, _status_code, _headers = get_server_activities_with_http_info(opts)
      data
    end

    # Get Server Activities
    # Get Server Activities
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetServerActivities200Response, Integer, Hash)>] GetServerActivities200Response data, response status code and response headers
    def get_server_activities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActivitiesApi.get_server_activities ...'
      end
      # resource path
      local_var_path = '/activities'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetServerActivities200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"ActivitiesApi.get_server_activities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivitiesApi#get_server_activities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
