=begin
#Plex-API

#An Open API Spec for interacting with Plex.tv and Plex Servers

The version of the OpenAPI document: 0.0.3
Contact: Lukeslakemail@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module OpenapiClient
  class SessionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Session History
    # This will Retrieve a listing of all history views.
    # @param [Hash] opts the optional parameters
    # @return [GetSessionHistory200Response]
    def get_session_history(opts = {})
      data, _status_code, _headers = get_session_history_with_http_info(opts)
      data
    end

    # Get Session History
    # This will Retrieve a listing of all history views.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSessionHistory200Response, Integer, Hash)>] GetSessionHistory200Response data, response status code and response headers
    def get_session_history_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_session_history ...'
      end
      # resource path
      local_var_path = '/status/sessions/history/all'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSessionHistory200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"SessionsApi.get_session_history",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_session_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Active Sessions
    # This will retrieve the \"Now Playing\" Information of the PMS.
    # @param [Hash] opts the optional parameters
    # @return [GetSessions200Response]
    def get_sessions(opts = {})
      data, _status_code, _headers = get_sessions_with_http_info(opts)
      data
    end

    # Get Active Sessions
    # This will retrieve the \&quot;Now Playing\&quot; Information of the PMS.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSessions200Response, Integer, Hash)>] GetSessions200Response data, response status code and response headers
    def get_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_sessions ...'
      end
      # resource path
      local_var_path = '/status/sessions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSessions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"SessionsApi.get_sessions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Transcode Sessions
    # Get Transcode Sessions
    # @param [Hash] opts the optional parameters
    # @return [GetTranscodeSessions200Response]
    def get_transcode_sessions(opts = {})
      data, _status_code, _headers = get_transcode_sessions_with_http_info(opts)
      data
    end

    # Get Transcode Sessions
    # Get Transcode Sessions
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTranscodeSessions200Response, Integer, Hash)>] GetTranscodeSessions200Response data, response status code and response headers
    def get_transcode_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.get_transcode_sessions ...'
      end
      # resource path
      local_var_path = '/transcode/sessions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTranscodeSessions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"SessionsApi.get_transcode_sessions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#get_transcode_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stop a Transcode Session
    # Stop a Transcode Session
    # @param session_key [String] the Key of the transcode session to stop
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stop_transcode_session(session_key, opts = {})
      stop_transcode_session_with_http_info(session_key, opts)
      nil
    end

    # Stop a Transcode Session
    # Stop a Transcode Session
    # @param session_key [String] the Key of the transcode session to stop
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stop_transcode_session_with_http_info(session_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.stop_transcode_session ...'
      end
      # verify the required parameter 'session_key' is set
      if @api_client.config.client_side_validation && session_key.nil?
        fail ArgumentError, "Missing the required parameter 'session_key' when calling SessionsApi.stop_transcode_session"
      end
      # resource path
      local_var_path = '/transcode/sessions/{sessionKey}'.sub('{' + 'sessionKey' + '}', CGI.escape(session_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"SessionsApi.stop_transcode_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#stop_transcode_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
