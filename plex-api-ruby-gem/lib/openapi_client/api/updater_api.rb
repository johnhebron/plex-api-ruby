=begin
#Plex-API

#An Open API Spec for interacting with Plex.tv and Plex Servers

The version of the OpenAPI document: 0.0.3
Contact: Lukeslakemail@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module OpenapiClient
  class UpdaterApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Apply Updates
    # Note that these two parameters are effectively mutually exclusive. The `tonight` parameter takes precedence and `skip` will be ignored if `tonight` is also passed 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :tonight Indicate that you want the update to run during the next Butler execution. Omitting this or setting it to false indicates that the update should install
    # @option opts [Integer] :skip Indicate that the latest version should be marked as skipped. The &lt;Release&gt; entry for this version will have the &#x60;state&#x60; set to &#x60;skipped&#x60;.
    # @return [nil]
    def apply_updates(opts = {})
      apply_updates_with_http_info(opts)
      nil
    end

    # Apply Updates
    # Note that these two parameters are effectively mutually exclusive. The &#x60;tonight&#x60; parameter takes precedence and &#x60;skip&#x60; will be ignored if &#x60;tonight&#x60; is also passed 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :tonight Indicate that you want the update to run during the next Butler execution. Omitting this or setting it to false indicates that the update should install
    # @option opts [Integer] :skip Indicate that the latest version should be marked as skipped. The &lt;Release&gt; entry for this version will have the &#x60;state&#x60; set to &#x60;skipped&#x60;.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def apply_updates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UpdaterApi.apply_updates ...'
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'tonight'] && !allowable_values.include?(opts[:'tonight'])
        fail ArgumentError, "invalid value for \"tonight\", must be one of #{allowable_values}"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'skip'] && !allowable_values.include?(opts[:'skip'])
        fail ArgumentError, "invalid value for \"skip\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/updater/apply'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tonight'] = opts[:'tonight'] if !opts[:'tonight'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"UpdaterApi.apply_updates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpdaterApi#apply_updates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Checking for updates
    # Checking for updates
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :download Indicate that you want to start download any updates found.
    # @return [nil]
    def check_for_updates(opts = {})
      check_for_updates_with_http_info(opts)
      nil
    end

    # Checking for updates
    # Checking for updates
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :download Indicate that you want to start download any updates found.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def check_for_updates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UpdaterApi.check_for_updates ...'
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'download'] && !allowable_values.include?(opts[:'download'])
        fail ArgumentError, "invalid value for \"download\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/updater/check'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'download'] = opts[:'download'] if !opts[:'download'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"UpdaterApi.check_for_updates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpdaterApi#check_for_updates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Querying status of updates
    # Querying status of updates
    # @param [Hash] opts the optional parameters
    # @return [GetUpdateStatus200Response]
    def get_update_status(opts = {})
      data, _status_code, _headers = get_update_status_with_http_info(opts)
      data
    end

    # Querying status of updates
    # Querying status of updates
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetUpdateStatus200Response, Integer, Hash)>] GetUpdateStatus200Response data, response status code and response headers
    def get_update_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UpdaterApi.get_update_status ...'
      end
      # resource path
      local_var_path = '/updater/status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUpdateStatus200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"UpdaterApi.get_update_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpdaterApi#get_update_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
