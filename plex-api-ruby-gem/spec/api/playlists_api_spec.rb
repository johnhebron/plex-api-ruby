=begin
#Plex-API

#An Open API Spec for interacting with Plex.tv and Plex Servers

The version of the OpenAPI document: 0.0.3
Contact: Lukeslakemail@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::PlaylistsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PlaylistsApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::PlaylistsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PlaylistsApi' do
    it 'should create an instance of PlaylistsApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::PlaylistsApi)
    end
  end

  # unit tests for add_playlist_contents
  # Adding to a Playlist
  # Adds a generator to a playlist, same parameters as the POST to create. With a dumb playlist, this adds the specified items to the playlist. With a smart playlist, passing a new &#x60;uri&#x60; parameter replaces the rules for the playlist. Returns the playlist. 
  # @param playlist_id the ID of the playlist
  # @param uri the content URI for the playlist
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :play_queue_id the play queue to add to a playlist
  # @return [AddPlaylistContents200Response]
  describe 'add_playlist_contents test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clear_playlist_contents
  # Delete Playlist Contents
  # Clears a playlist, only works with dumb playlists. Returns the playlist. 
  # @param playlist_id the ID of the playlist
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clear_playlist_contents test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_playlist
  # Create a Playlist
  # Create a new playlist. By default the playlist is blank. To create a playlist along with a first item, pass: - &#x60;uri&#x60; - The content URI for what we&#39;re playing (e.g. &#x60;server://1234/com.plexapp.plugins.library/library/metadata/1&#x60;). - &#x60;playQueueID&#x60; - To create a playlist from an existing play queue. 
  # @param title name of the playlist
  # @param type type of playlist to create
  # @param smart whether the playlist is smart or not
  # @param uri the content URI for the playlist
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :play_queue_id the play queue to copy to a playlist
  # @return [CreatePlaylist200Response]
  describe 'create_playlist test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_playlist
  # Deletes a Playlist
  # This endpoint will delete a playlist 
  # @param playlist_id the ID of the playlist
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_playlist test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_playlist
  # Retrieve Playlist
  # Gets detailed metadata for a playlist. A playlist for many purposes (rating, editing metadata, tagging), can be treated like a regular metadata item: Smart playlist details contain the &#x60;content&#x60; attribute. This is the content URI for the generator. This can then be parsed by a client to provide smart playlist editing. 
  # @param playlist_id the ID of the playlist
  # @param [Hash] opts the optional parameters
  # @return [GetPlaylist200Response]
  describe 'get_playlist test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_playlist_contents
  # Retrieve Playlist Contents
  # Gets the contents of a playlist. Should be paged by clients via standard mechanisms.  By default leaves are returned (e.g. episodes, movies). In order to return other types you can use the &#x60;type&#x60; parameter.  For example, you could use this to display a list of recently added albums vis a smart playlist.  Note that for dumb playlists, items have a &#x60;playlistItemID&#x60; attribute which is used for deleting or moving items. 
  # @param playlist_id the ID of the playlist
  # @param type the metadata type of the item to return
  # @param [Hash] opts the optional parameters
  # @return [GetPlaylistContents200Response]
  describe 'get_playlist_contents test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_playlists
  # Get All Playlists
  # Get All Playlists given the specified filters.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :playlist_type limit to a type of playlist.
  # @option opts [Integer] :smart type of playlists to return (default is all).
  # @return [GetPlaylists200Response]
  describe 'get_playlists test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_playlist
  # Update a Playlist
  # From PMS version 1.9.1 clients can also edit playlist metadata using this endpoint as they would via &#x60;PUT /library/metadata/{playlistID}&#x60; 
  # @param playlist_id the ID of the playlist
  # @param [Hash] opts the optional parameters
  # @option opts [String] :title name of the playlist
  # @option opts [String] :summary summary description of the playlist
  # @return [nil]
  describe 'update_playlist test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for upload_playlist
  # Upload Playlist
  # Imports m3u playlists by passing a path on the server to scan for m3u-formatted playlist files, or a path to a single playlist file. 
  # @param path absolute path to a directory on the server where m3u files are stored, or the absolute path to a playlist file on the server.  If the &#x60;path&#x60; argument is a directory, that path will be scanned for playlist files to be processed.  Each file in that directory creates a separate playlist, with a name based on the filename of the file that created it.  The GUID of each playlist is based on the filename.  If the &#x60;path&#x60; argument is a file, that file will be used to create a new playlist, with the name based on the filename of the file that created it.  The GUID of each playlist is based on the filename. 
  # @param force force overwriting of duplicate playlists. By default, a playlist file uploaded with the same path will overwrite the existing playlist.  The &#x60;force&#x60; argument is used to disable overwriting. If the &#x60;force&#x60; argument is set to 0, a new playlist will be created suffixed with the date and time that the duplicate was uploaded. 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'upload_playlist test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
