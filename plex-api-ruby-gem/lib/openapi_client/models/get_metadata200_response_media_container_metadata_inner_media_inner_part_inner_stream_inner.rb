=begin
#Plex-API

#An Open API Spec for interacting with Plex.tv and Plex Servers

The version of the OpenAPI document: 0.0.3
Contact: Lukeslakemail@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  class GetMetadata200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner
    attr_accessor :id

    attr_accessor :stream_type

    attr_accessor :default

    attr_accessor :codec

    attr_accessor :index

    attr_accessor :bitrate

    attr_accessor :bit_depth

    attr_accessor :chroma_location

    attr_accessor :chroma_subsampling

    attr_accessor :coded_height

    attr_accessor :coded_width

    attr_accessor :color_primaries

    attr_accessor :color_range

    attr_accessor :color_space

    attr_accessor :color_trc

    attr_accessor :frame_rate

    attr_accessor :has_scaling_matrix

    attr_accessor :height

    attr_accessor :level

    attr_accessor :profile

    attr_accessor :ref_frames

    attr_accessor :scan_type

    attr_accessor :stream_identifier

    attr_accessor :width

    attr_accessor :display_title

    attr_accessor :extended_display_title

    attr_accessor :selected

    attr_accessor :channels

    attr_accessor :language

    attr_accessor :language_tag

    attr_accessor :language_code

    attr_accessor :sampling_rate

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'stream_type' => :'streamType',
        :'default' => :'default',
        :'codec' => :'codec',
        :'index' => :'index',
        :'bitrate' => :'bitrate',
        :'bit_depth' => :'bitDepth',
        :'chroma_location' => :'chromaLocation',
        :'chroma_subsampling' => :'chromaSubsampling',
        :'coded_height' => :'codedHeight',
        :'coded_width' => :'codedWidth',
        :'color_primaries' => :'colorPrimaries',
        :'color_range' => :'colorRange',
        :'color_space' => :'colorSpace',
        :'color_trc' => :'colorTrc',
        :'frame_rate' => :'frameRate',
        :'has_scaling_matrix' => :'hasScalingMatrix',
        :'height' => :'height',
        :'level' => :'level',
        :'profile' => :'profile',
        :'ref_frames' => :'refFrames',
        :'scan_type' => :'scanType',
        :'stream_identifier' => :'streamIdentifier',
        :'width' => :'width',
        :'display_title' => :'displayTitle',
        :'extended_display_title' => :'extendedDisplayTitle',
        :'selected' => :'selected',
        :'channels' => :'channels',
        :'language' => :'language',
        :'language_tag' => :'languageTag',
        :'language_code' => :'languageCode',
        :'sampling_rate' => :'samplingRate'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'stream_type' => :'Integer',
        :'default' => :'Boolean',
        :'codec' => :'String',
        :'index' => :'Integer',
        :'bitrate' => :'Integer',
        :'bit_depth' => :'Integer',
        :'chroma_location' => :'String',
        :'chroma_subsampling' => :'String',
        :'coded_height' => :'Integer',
        :'coded_width' => :'Integer',
        :'color_primaries' => :'String',
        :'color_range' => :'String',
        :'color_space' => :'String',
        :'color_trc' => :'String',
        :'frame_rate' => :'Integer',
        :'has_scaling_matrix' => :'Boolean',
        :'height' => :'Integer',
        :'level' => :'Integer',
        :'profile' => :'String',
        :'ref_frames' => :'Integer',
        :'scan_type' => :'String',
        :'stream_identifier' => :'String',
        :'width' => :'Integer',
        :'display_title' => :'String',
        :'extended_display_title' => :'String',
        :'selected' => :'Boolean',
        :'channels' => :'Integer',
        :'language' => :'String',
        :'language_tag' => :'String',
        :'language_code' => :'String',
        :'sampling_rate' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::GetMetadata200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::GetMetadata200ResponseMediaContainerMetadataInnerMediaInnerPartInnerStreamInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'stream_type')
        self.stream_type = attributes[:'stream_type']
      end

      if attributes.key?(:'default')
        self.default = attributes[:'default']
      end

      if attributes.key?(:'codec')
        self.codec = attributes[:'codec']
      end

      if attributes.key?(:'index')
        self.index = attributes[:'index']
      end

      if attributes.key?(:'bitrate')
        self.bitrate = attributes[:'bitrate']
      end

      if attributes.key?(:'bit_depth')
        self.bit_depth = attributes[:'bit_depth']
      end

      if attributes.key?(:'chroma_location')
        self.chroma_location = attributes[:'chroma_location']
      end

      if attributes.key?(:'chroma_subsampling')
        self.chroma_subsampling = attributes[:'chroma_subsampling']
      end

      if attributes.key?(:'coded_height')
        self.coded_height = attributes[:'coded_height']
      end

      if attributes.key?(:'coded_width')
        self.coded_width = attributes[:'coded_width']
      end

      if attributes.key?(:'color_primaries')
        self.color_primaries = attributes[:'color_primaries']
      end

      if attributes.key?(:'color_range')
        self.color_range = attributes[:'color_range']
      end

      if attributes.key?(:'color_space')
        self.color_space = attributes[:'color_space']
      end

      if attributes.key?(:'color_trc')
        self.color_trc = attributes[:'color_trc']
      end

      if attributes.key?(:'frame_rate')
        self.frame_rate = attributes[:'frame_rate']
      end

      if attributes.key?(:'has_scaling_matrix')
        self.has_scaling_matrix = attributes[:'has_scaling_matrix']
      end

      if attributes.key?(:'height')
        self.height = attributes[:'height']
      end

      if attributes.key?(:'level')
        self.level = attributes[:'level']
      end

      if attributes.key?(:'profile')
        self.profile = attributes[:'profile']
      end

      if attributes.key?(:'ref_frames')
        self.ref_frames = attributes[:'ref_frames']
      end

      if attributes.key?(:'scan_type')
        self.scan_type = attributes[:'scan_type']
      end

      if attributes.key?(:'stream_identifier')
        self.stream_identifier = attributes[:'stream_identifier']
      end

      if attributes.key?(:'width')
        self.width = attributes[:'width']
      end

      if attributes.key?(:'display_title')
        self.display_title = attributes[:'display_title']
      end

      if attributes.key?(:'extended_display_title')
        self.extended_display_title = attributes[:'extended_display_title']
      end

      if attributes.key?(:'selected')
        self.selected = attributes[:'selected']
      end

      if attributes.key?(:'channels')
        self.channels = attributes[:'channels']
      end

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.key?(:'language_tag')
        self.language_tag = attributes[:'language_tag']
      end

      if attributes.key?(:'language_code')
        self.language_code = attributes[:'language_code']
      end

      if attributes.key?(:'sampling_rate')
        self.sampling_rate = attributes[:'sampling_rate']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          stream_type == o.stream_type &&
          default == o.default &&
          codec == o.codec &&
          index == o.index &&
          bitrate == o.bitrate &&
          bit_depth == o.bit_depth &&
          chroma_location == o.chroma_location &&
          chroma_subsampling == o.chroma_subsampling &&
          coded_height == o.coded_height &&
          coded_width == o.coded_width &&
          color_primaries == o.color_primaries &&
          color_range == o.color_range &&
          color_space == o.color_space &&
          color_trc == o.color_trc &&
          frame_rate == o.frame_rate &&
          has_scaling_matrix == o.has_scaling_matrix &&
          height == o.height &&
          level == o.level &&
          profile == o.profile &&
          ref_frames == o.ref_frames &&
          scan_type == o.scan_type &&
          stream_identifier == o.stream_identifier &&
          width == o.width &&
          display_title == o.display_title &&
          extended_display_title == o.extended_display_title &&
          selected == o.selected &&
          channels == o.channels &&
          language == o.language &&
          language_tag == o.language_tag &&
          language_code == o.language_code &&
          sampling_rate == o.sampling_rate
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, stream_type, default, codec, index, bitrate, bit_depth, chroma_location, chroma_subsampling, coded_height, coded_width, color_primaries, color_range, color_space, color_trc, frame_rate, has_scaling_matrix, height, level, profile, ref_frames, scan_type, stream_identifier, width, display_title, extended_display_title, selected, channels, language, language_tag, language_code, sampling_rate].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
