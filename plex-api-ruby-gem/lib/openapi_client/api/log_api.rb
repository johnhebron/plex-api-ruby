=begin
#Plex-API

#An Open API Spec for interacting with Plex.tv and Plex Servers

The version of the OpenAPI document: 0.0.3
Contact: Lukeslakemail@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module OpenapiClient
  class LogApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Enabling Papertrail
    # This endpoint will enable all Plex Media Serverlogs to be sent to the Papertrail networked logging site for a period of time. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enable_paper_trail(opts = {})
      enable_paper_trail_with_http_info(opts)
      nil
    end

    # Enabling Papertrail
    # This endpoint will enable all Plex Media Serverlogs to be sent to the Papertrail networked logging site for a period of time. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enable_paper_trail_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LogApi.enable_paper_trail ...'
      end
      # resource path
      local_var_path = '/log/networked'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"LogApi.enable_paper_trail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogApi#enable_paper_trail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Logging a single line message.
    # This endpoint will write a single-line log message, including a level and source to the main Plex Media Server log. 
    # @param level [Integer] An integer log level to write to the PMS log with.   0: Error   1: Warning   2: Info   3: Debug   4: Verbose 
    # @param message [String] The text of the message to write to the log.
    # @param source [String] a string indicating the source of the message.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def log_line(level, message, source, opts = {})
      log_line_with_http_info(level, message, source, opts)
      nil
    end

    # Logging a single line message.
    # This endpoint will write a single-line log message, including a level and source to the main Plex Media Server log. 
    # @param level [Integer] An integer log level to write to the PMS log with.   0: Error   1: Warning   2: Info   3: Debug   4: Verbose 
    # @param message [String] The text of the message to write to the log.
    # @param source [String] a string indicating the source of the message.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def log_line_with_http_info(level, message, source, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LogApi.log_line ...'
      end
      # verify the required parameter 'level' is set
      if @api_client.config.client_side_validation && level.nil?
        fail ArgumentError, "Missing the required parameter 'level' when calling LogApi.log_line"
      end
      # verify enum value
      allowable_values = [0, 1, 2, 3, 4]
      if @api_client.config.client_side_validation && !allowable_values.include?(level)
        fail ArgumentError, "invalid value for \"level\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'message' is set
      if @api_client.config.client_side_validation && message.nil?
        fail ArgumentError, "Missing the required parameter 'message' when calling LogApi.log_line"
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling LogApi.log_line"
      end
      # resource path
      local_var_path = '/log'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'level'] = level
      query_params[:'message'] = message
      query_params[:'source'] = source

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"LogApi.log_line",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogApi#log_line\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Logging a multi-line message
    # This endpoint allows for the batch addition of log entries to the main Plex Media Server log.   It accepts a text/plain request body, where each line represents a distinct log entry.   Each log entry consists of URL-encoded key-value pairs, specifying log attributes such as 'level', 'message', and 'source'.    Log entries are separated by a newline character (`\\n`).   Each entry's parameters should be URL-encoded to ensure accurate parsing and handling of special characters.   This method is efficient for logging multiple entries in a single API call, reducing the overhead of multiple individual requests.    The 'level' parameter specifies the log entry's severity or importance, with the following integer values: - `0`: Error - Critical issues that require immediate attention. - `1`: Warning - Important events that are not critical but may indicate potential issues. - `2`: Info - General informational messages about system operation. - `3`: Debug - Detailed information useful for debugging purposes. - `4`: Verbose - Highly detailed diagnostic information for in-depth analysis.  The 'message' parameter contains the log text, and 'source' identifies the log message's origin (e.g., an application name or module).  Example of a single log entry format: `level=4&message=Sample%20log%20entry&source=applicationName`  Ensure each parameter is properly URL-encoded to avoid interpretation issues. 
    # @param body [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def log_multi_line(body, opts = {})
      log_multi_line_with_http_info(body, opts)
      nil
    end

    # Logging a multi-line message
    # This endpoint allows for the batch addition of log entries to the main Plex Media Server log.   It accepts a text/plain request body, where each line represents a distinct log entry.   Each log entry consists of URL-encoded key-value pairs, specifying log attributes such as &#39;level&#39;, &#39;message&#39;, and &#39;source&#39;.    Log entries are separated by a newline character (&#x60;\\n&#x60;).   Each entry&#39;s parameters should be URL-encoded to ensure accurate parsing and handling of special characters.   This method is efficient for logging multiple entries in a single API call, reducing the overhead of multiple individual requests.    The &#39;level&#39; parameter specifies the log entry&#39;s severity or importance, with the following integer values: - &#x60;0&#x60;: Error - Critical issues that require immediate attention. - &#x60;1&#x60;: Warning - Important events that are not critical but may indicate potential issues. - &#x60;2&#x60;: Info - General informational messages about system operation. - &#x60;3&#x60;: Debug - Detailed information useful for debugging purposes. - &#x60;4&#x60;: Verbose - Highly detailed diagnostic information for in-depth analysis.  The &#39;message&#39; parameter contains the log text, and &#39;source&#39; identifies the log message&#39;s origin (e.g., an application name or module).  Example of a single log entry format: &#x60;level&#x3D;4&amp;message&#x3D;Sample%20log%20entry&amp;source&#x3D;applicationName&#x60;  Ensure each parameter is properly URL-encoded to avoid interpretation issues. 
    # @param body [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def log_multi_line_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LogApi.log_multi_line ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LogApi.log_multi_line"
      end
      # resource path
      local_var_path = '/log'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['text/plain'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"LogApi.log_multi_line",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogApi#log_multi_line\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
