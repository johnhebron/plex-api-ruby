=begin
#Plex-API

#An Open API Spec for interacting with Plex.tv and Plex Servers

The version of the OpenAPI document: 0.0.3
Contact: Lukeslakemail@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module OpenapiClient
  class HubsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Global Hubs
    # Get Global Hubs filtered by the parameters provided.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :count The number of items to return with each hub.
    # @option opts [Integer] :only_transient Only return hubs which are \&quot;transient\&quot;, meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
    # @return [nil]
    def get_global_hubs(opts = {})
      get_global_hubs_with_http_info(opts)
      nil
    end

    # Get Global Hubs
    # Get Global Hubs filtered by the parameters provided.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :count The number of items to return with each hub.
    # @option opts [Integer] :only_transient Only return hubs which are \&quot;transient\&quot;, meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_global_hubs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HubsApi.get_global_hubs ...'
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'only_transient'] && !allowable_values.include?(opts[:'only_transient'])
        fail ArgumentError, "invalid value for \"only_transient\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/hubs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'onlyTransient'] = opts[:'only_transient'] if !opts[:'only_transient'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"HubsApi.get_global_hubs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HubsApi#get_global_hubs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get library specific hubs
    # This endpoint will return a list of library specific hubs 
    # @param section_id [Float] the Id of the library to query
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :count The number of items to return with each hub.
    # @option opts [Integer] :only_transient Only return hubs which are \&quot;transient\&quot;, meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
    # @return [nil]
    def get_library_hubs(section_id, opts = {})
      get_library_hubs_with_http_info(section_id, opts)
      nil
    end

    # Get library specific hubs
    # This endpoint will return a list of library specific hubs 
    # @param section_id [Float] the Id of the library to query
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :count The number of items to return with each hub.
    # @option opts [Integer] :only_transient Only return hubs which are \&quot;transient\&quot;, meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_library_hubs_with_http_info(section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HubsApi.get_library_hubs ...'
      end
      # verify the required parameter 'section_id' is set
      if @api_client.config.client_side_validation && section_id.nil?
        fail ArgumentError, "Missing the required parameter 'section_id' when calling HubsApi.get_library_hubs"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'only_transient'] && !allowable_values.include?(opts[:'only_transient'])
        fail ArgumentError, "invalid value for \"only_transient\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/hubs/sections/{sectionId}'.sub('{' + 'sectionId' + '}', CGI.escape(section_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'onlyTransient'] = opts[:'only_transient'] if !opts[:'only_transient'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"HubsApi.get_library_hubs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HubsApi#get_library_hubs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
