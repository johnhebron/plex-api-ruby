=begin
#Plex-API

#An Open API Spec for interacting with Plex.tv and Plex Servers

The version of the OpenAPI document: 0.0.3
Contact: Lukeslakemail@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  class GetLibraries200ResponseMediaContainerDirectoryInner
    attr_accessor :allow_sync

    attr_accessor :art

    attr_accessor :composite

    attr_accessor :filters

    attr_accessor :refreshing

    attr_accessor :thumb

    attr_accessor :key

    attr_accessor :type

    attr_accessor :title

    attr_accessor :agent

    attr_accessor :scanner

    attr_accessor :language

    attr_accessor :uuid

    attr_accessor :updated_at

    attr_accessor :created_at

    attr_accessor :scanned_at

    attr_accessor :content

    attr_accessor :directory

    attr_accessor :content_changed_at

    attr_accessor :hidden

    attr_accessor :location

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'allow_sync' => :'allowSync',
        :'art' => :'art',
        :'composite' => :'composite',
        :'filters' => :'filters',
        :'refreshing' => :'refreshing',
        :'thumb' => :'thumb',
        :'key' => :'key',
        :'type' => :'type',
        :'title' => :'title',
        :'agent' => :'agent',
        :'scanner' => :'scanner',
        :'language' => :'language',
        :'uuid' => :'uuid',
        :'updated_at' => :'updatedAt',
        :'created_at' => :'createdAt',
        :'scanned_at' => :'scannedAt',
        :'content' => :'content',
        :'directory' => :'directory',
        :'content_changed_at' => :'contentChangedAt',
        :'hidden' => :'hidden',
        :'location' => :'Location'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'allow_sync' => :'Boolean',
        :'art' => :'String',
        :'composite' => :'String',
        :'filters' => :'Boolean',
        :'refreshing' => :'Boolean',
        :'thumb' => :'String',
        :'key' => :'String',
        :'type' => :'String',
        :'title' => :'String',
        :'agent' => :'String',
        :'scanner' => :'String',
        :'language' => :'String',
        :'uuid' => :'String',
        :'updated_at' => :'Integer',
        :'created_at' => :'Integer',
        :'scanned_at' => :'Integer',
        :'content' => :'Boolean',
        :'directory' => :'Boolean',
        :'content_changed_at' => :'Integer',
        :'hidden' => :'Integer',
        :'location' => :'Array<GetLibraries200ResponseMediaContainerDirectoryInnerLocationInner>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::GetLibraries200ResponseMediaContainerDirectoryInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::GetLibraries200ResponseMediaContainerDirectoryInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'allow_sync')
        self.allow_sync = attributes[:'allow_sync']
      end

      if attributes.key?(:'art')
        self.art = attributes[:'art']
      end

      if attributes.key?(:'composite')
        self.composite = attributes[:'composite']
      end

      if attributes.key?(:'filters')
        self.filters = attributes[:'filters']
      end

      if attributes.key?(:'refreshing')
        self.refreshing = attributes[:'refreshing']
      end

      if attributes.key?(:'thumb')
        self.thumb = attributes[:'thumb']
      end

      if attributes.key?(:'key')
        self.key = attributes[:'key']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'agent')
        self.agent = attributes[:'agent']
      end

      if attributes.key?(:'scanner')
        self.scanner = attributes[:'scanner']
      end

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.key?(:'uuid')
        self.uuid = attributes[:'uuid']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'scanned_at')
        self.scanned_at = attributes[:'scanned_at']
      end

      if attributes.key?(:'content')
        self.content = attributes[:'content']
      end

      if attributes.key?(:'directory')
        self.directory = attributes[:'directory']
      end

      if attributes.key?(:'content_changed_at')
        self.content_changed_at = attributes[:'content_changed_at']
      end

      if attributes.key?(:'hidden')
        self.hidden = attributes[:'hidden']
      end

      if attributes.key?(:'location')
        if (value = attributes[:'location']).is_a?(Array)
          self.location = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          allow_sync == o.allow_sync &&
          art == o.art &&
          composite == o.composite &&
          filters == o.filters &&
          refreshing == o.refreshing &&
          thumb == o.thumb &&
          key == o.key &&
          type == o.type &&
          title == o.title &&
          agent == o.agent &&
          scanner == o.scanner &&
          language == o.language &&
          uuid == o.uuid &&
          updated_at == o.updated_at &&
          created_at == o.created_at &&
          scanned_at == o.scanned_at &&
          content == o.content &&
          directory == o.directory &&
          content_changed_at == o.content_changed_at &&
          hidden == o.hidden &&
          location == o.location
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [allow_sync, art, composite, filters, refreshing, thumb, key, type, title, agent, scanner, language, uuid, updated_at, created_at, scanned_at, content, directory, content_changed_at, hidden, location].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
