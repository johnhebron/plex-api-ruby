=begin
#Plex-API

#An Open API Spec for interacting with Plex.tv and Plex Servers

The version of the OpenAPI document: 0.0.3
Contact: Lukeslakemail@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  class GetPlaylistContents200ResponseMediaContainerMetadataInner
    attr_accessor :rating_key

    attr_accessor :key

    attr_accessor :guid

    attr_accessor :studio

    attr_accessor :type

    attr_accessor :title

    attr_accessor :title_sort

    attr_accessor :library_section_title

    attr_accessor :library_section_id

    attr_accessor :library_section_key

    attr_accessor :content_rating

    attr_accessor :summary

    attr_accessor :rating

    attr_accessor :audience_rating

    attr_accessor :year

    attr_accessor :tagline

    attr_accessor :thumb

    attr_accessor :art

    attr_accessor :duration

    attr_accessor :originally_available_at

    attr_accessor :added_at

    attr_accessor :updated_at

    attr_accessor :audience_rating_image

    attr_accessor :has_premium_extras

    attr_accessor :has_premium_primary_extra

    attr_accessor :rating_image

    attr_accessor :media

    attr_accessor :genre

    attr_accessor :country

    attr_accessor :director

    attr_accessor :writer

    attr_accessor :role

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'rating_key' => :'ratingKey',
        :'key' => :'key',
        :'guid' => :'guid',
        :'studio' => :'studio',
        :'type' => :'type',
        :'title' => :'title',
        :'title_sort' => :'titleSort',
        :'library_section_title' => :'librarySectionTitle',
        :'library_section_id' => :'librarySectionID',
        :'library_section_key' => :'librarySectionKey',
        :'content_rating' => :'contentRating',
        :'summary' => :'summary',
        :'rating' => :'rating',
        :'audience_rating' => :'audienceRating',
        :'year' => :'year',
        :'tagline' => :'tagline',
        :'thumb' => :'thumb',
        :'art' => :'art',
        :'duration' => :'duration',
        :'originally_available_at' => :'originallyAvailableAt',
        :'added_at' => :'addedAt',
        :'updated_at' => :'updatedAt',
        :'audience_rating_image' => :'audienceRatingImage',
        :'has_premium_extras' => :'hasPremiumExtras',
        :'has_premium_primary_extra' => :'hasPremiumPrimaryExtra',
        :'rating_image' => :'ratingImage',
        :'media' => :'Media',
        :'genre' => :'Genre',
        :'country' => :'Country',
        :'director' => :'Director',
        :'writer' => :'Writer',
        :'role' => :'Role'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'rating_key' => :'String',
        :'key' => :'String',
        :'guid' => :'String',
        :'studio' => :'String',
        :'type' => :'String',
        :'title' => :'String',
        :'title_sort' => :'String',
        :'library_section_title' => :'String',
        :'library_section_id' => :'Integer',
        :'library_section_key' => :'String',
        :'content_rating' => :'String',
        :'summary' => :'String',
        :'rating' => :'Float',
        :'audience_rating' => :'Float',
        :'year' => :'Integer',
        :'tagline' => :'String',
        :'thumb' => :'String',
        :'art' => :'String',
        :'duration' => :'Integer',
        :'originally_available_at' => :'Date',
        :'added_at' => :'Integer',
        :'updated_at' => :'Integer',
        :'audience_rating_image' => :'String',
        :'has_premium_extras' => :'String',
        :'has_premium_primary_extra' => :'String',
        :'rating_image' => :'String',
        :'media' => :'Array<GetPlaylistContents200ResponseMediaContainerMetadataInnerMediaInner>',
        :'genre' => :'Array<GetPlaylistContents200ResponseMediaContainerMetadataInnerGenreInner>',
        :'country' => :'Array<GetRecentlyAdded200ResponseMediaContainerMetadataInnerCountryInner>',
        :'director' => :'Array<GetPlaylistContents200ResponseMediaContainerMetadataInnerDirectorInner>',
        :'writer' => :'Array<GetPlaylistContents200ResponseMediaContainerMetadataInnerDirectorInner>',
        :'role' => :'Array<GetPlaylistContents200ResponseMediaContainerMetadataInnerRoleInner>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::GetPlaylistContents200ResponseMediaContainerMetadataInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::GetPlaylistContents200ResponseMediaContainerMetadataInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'rating_key')
        self.rating_key = attributes[:'rating_key']
      end

      if attributes.key?(:'key')
        self.key = attributes[:'key']
      end

      if attributes.key?(:'guid')
        self.guid = attributes[:'guid']
      end

      if attributes.key?(:'studio')
        self.studio = attributes[:'studio']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'title_sort')
        self.title_sort = attributes[:'title_sort']
      end

      if attributes.key?(:'library_section_title')
        self.library_section_title = attributes[:'library_section_title']
      end

      if attributes.key?(:'library_section_id')
        self.library_section_id = attributes[:'library_section_id']
      end

      if attributes.key?(:'library_section_key')
        self.library_section_key = attributes[:'library_section_key']
      end

      if attributes.key?(:'content_rating')
        self.content_rating = attributes[:'content_rating']
      end

      if attributes.key?(:'summary')
        self.summary = attributes[:'summary']
      end

      if attributes.key?(:'rating')
        self.rating = attributes[:'rating']
      end

      if attributes.key?(:'audience_rating')
        self.audience_rating = attributes[:'audience_rating']
      end

      if attributes.key?(:'year')
        self.year = attributes[:'year']
      end

      if attributes.key?(:'tagline')
        self.tagline = attributes[:'tagline']
      end

      if attributes.key?(:'thumb')
        self.thumb = attributes[:'thumb']
      end

      if attributes.key?(:'art')
        self.art = attributes[:'art']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'originally_available_at')
        self.originally_available_at = attributes[:'originally_available_at']
      end

      if attributes.key?(:'added_at')
        self.added_at = attributes[:'added_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'audience_rating_image')
        self.audience_rating_image = attributes[:'audience_rating_image']
      end

      if attributes.key?(:'has_premium_extras')
        self.has_premium_extras = attributes[:'has_premium_extras']
      end

      if attributes.key?(:'has_premium_primary_extra')
        self.has_premium_primary_extra = attributes[:'has_premium_primary_extra']
      end

      if attributes.key?(:'rating_image')
        self.rating_image = attributes[:'rating_image']
      end

      if attributes.key?(:'media')
        if (value = attributes[:'media']).is_a?(Array)
          self.media = value
        end
      end

      if attributes.key?(:'genre')
        if (value = attributes[:'genre']).is_a?(Array)
          self.genre = value
        end
      end

      if attributes.key?(:'country')
        if (value = attributes[:'country']).is_a?(Array)
          self.country = value
        end
      end

      if attributes.key?(:'director')
        if (value = attributes[:'director']).is_a?(Array)
          self.director = value
        end
      end

      if attributes.key?(:'writer')
        if (value = attributes[:'writer']).is_a?(Array)
          self.writer = value
        end
      end

      if attributes.key?(:'role')
        if (value = attributes[:'role']).is_a?(Array)
          self.role = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          rating_key == o.rating_key &&
          key == o.key &&
          guid == o.guid &&
          studio == o.studio &&
          type == o.type &&
          title == o.title &&
          title_sort == o.title_sort &&
          library_section_title == o.library_section_title &&
          library_section_id == o.library_section_id &&
          library_section_key == o.library_section_key &&
          content_rating == o.content_rating &&
          summary == o.summary &&
          rating == o.rating &&
          audience_rating == o.audience_rating &&
          year == o.year &&
          tagline == o.tagline &&
          thumb == o.thumb &&
          art == o.art &&
          duration == o.duration &&
          originally_available_at == o.originally_available_at &&
          added_at == o.added_at &&
          updated_at == o.updated_at &&
          audience_rating_image == o.audience_rating_image &&
          has_premium_extras == o.has_premium_extras &&
          has_premium_primary_extra == o.has_premium_primary_extra &&
          rating_image == o.rating_image &&
          media == o.media &&
          genre == o.genre &&
          country == o.country &&
          director == o.director &&
          writer == o.writer &&
          role == o.role
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [rating_key, key, guid, studio, type, title, title_sort, library_section_title, library_section_id, library_section_key, content_rating, summary, rating, audience_rating, year, tagline, thumb, art, duration, originally_available_at, added_at, updated_at, audience_rating_image, has_premium_extras, has_premium_primary_extra, rating_image, media, genre, country, director, writer, role].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
