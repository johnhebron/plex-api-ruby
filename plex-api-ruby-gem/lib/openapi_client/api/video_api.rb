=begin
#Plex-API

#An Open API Spec for interacting with Plex.tv and Plex Servers

The version of the OpenAPI document: 0.0.3
Contact: Lukeslakemail@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module OpenapiClient
  class VideoApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the timeline for a media item
    # Get the timeline for a media item
    # @param rating_key [Float] The rating key of the media item
    # @param key [String] The key of the media item to get the timeline for
    # @param state [String] The state of the media item
    # @param has_mde [Float] Whether the media item has MDE
    # @param time [Float] The time of the media item
    # @param duration [Float] The duration of the media item
    # @param context [String] The context of the media item
    # @param play_queue_item_id [Float] The play queue item ID of the media item
    # @param play_back_time [Float] The playback time of the media item
    # @param row [Float] The row of the media item
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_timeline(rating_key, key, state, has_mde, time, duration, context, play_queue_item_id, play_back_time, row, opts = {})
      get_timeline_with_http_info(rating_key, key, state, has_mde, time, duration, context, play_queue_item_id, play_back_time, row, opts)
      nil
    end

    # Get the timeline for a media item
    # Get the timeline for a media item
    # @param rating_key [Float] The rating key of the media item
    # @param key [String] The key of the media item to get the timeline for
    # @param state [String] The state of the media item
    # @param has_mde [Float] Whether the media item has MDE
    # @param time [Float] The time of the media item
    # @param duration [Float] The duration of the media item
    # @param context [String] The context of the media item
    # @param play_queue_item_id [Float] The play queue item ID of the media item
    # @param play_back_time [Float] The playback time of the media item
    # @param row [Float] The row of the media item
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_timeline_with_http_info(rating_key, key, state, has_mde, time, duration, context, play_queue_item_id, play_back_time, row, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VideoApi.get_timeline ...'
      end
      # verify the required parameter 'rating_key' is set
      if @api_client.config.client_side_validation && rating_key.nil?
        fail ArgumentError, "Missing the required parameter 'rating_key' when calling VideoApi.get_timeline"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling VideoApi.get_timeline"
      end
      # verify the required parameter 'state' is set
      if @api_client.config.client_side_validation && state.nil?
        fail ArgumentError, "Missing the required parameter 'state' when calling VideoApi.get_timeline"
      end
      # verify enum value
      allowable_values = ["playing", "paused", "stopped"]
      if @api_client.config.client_side_validation && !allowable_values.include?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'has_mde' is set
      if @api_client.config.client_side_validation && has_mde.nil?
        fail ArgumentError, "Missing the required parameter 'has_mde' when calling VideoApi.get_timeline"
      end
      # verify the required parameter 'time' is set
      if @api_client.config.client_side_validation && time.nil?
        fail ArgumentError, "Missing the required parameter 'time' when calling VideoApi.get_timeline"
      end
      # verify the required parameter 'duration' is set
      if @api_client.config.client_side_validation && duration.nil?
        fail ArgumentError, "Missing the required parameter 'duration' when calling VideoApi.get_timeline"
      end
      # verify the required parameter 'context' is set
      if @api_client.config.client_side_validation && context.nil?
        fail ArgumentError, "Missing the required parameter 'context' when calling VideoApi.get_timeline"
      end
      # verify the required parameter 'play_queue_item_id' is set
      if @api_client.config.client_side_validation && play_queue_item_id.nil?
        fail ArgumentError, "Missing the required parameter 'play_queue_item_id' when calling VideoApi.get_timeline"
      end
      # verify the required parameter 'play_back_time' is set
      if @api_client.config.client_side_validation && play_back_time.nil?
        fail ArgumentError, "Missing the required parameter 'play_back_time' when calling VideoApi.get_timeline"
      end
      # verify the required parameter 'row' is set
      if @api_client.config.client_side_validation && row.nil?
        fail ArgumentError, "Missing the required parameter 'row' when calling VideoApi.get_timeline"
      end
      # resource path
      local_var_path = '/:/timeline'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ratingKey'] = rating_key
      query_params[:'key'] = key
      query_params[:'state'] = state
      query_params[:'hasMDE'] = has_mde
      query_params[:'time'] = time
      query_params[:'duration'] = duration
      query_params[:'context'] = context
      query_params[:'playQueueItemID'] = play_queue_item_id
      query_params[:'playBackTime'] = play_back_time
      query_params[:'row'] = row

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"VideoApi.get_timeline",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideoApi#get_timeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start Universal Transcode
    # Begin a Universal Transcode Session
    # @param has_mde [Float] Whether the media item has MDE
    # @param path [String] The path to the media item to transcode
    # @param media_index [Float] The index of the media item to transcode
    # @param part_index [Float] The index of the part to transcode
    # @param protocol [String] The protocol to use for the transcode session
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :fast_seek Whether to use fast seek or not
    # @option opts [Float] :direct_play Whether to use direct play or not
    # @option opts [Float] :direct_stream Whether to use direct stream or not
    # @option opts [Float] :subtitle_size The size of the subtitles
    # @option opts [String] :subtites The subtitles
    # @option opts [Float] :audio_boost The audio boost
    # @option opts [String] :location The location of the transcode session
    # @option opts [Float] :media_buffer_size The size of the media buffer
    # @option opts [String] :session The session ID
    # @option opts [Float] :add_debug_overlay Whether to add a debug overlay or not
    # @option opts [Float] :auto_adjust_quality Whether to auto adjust quality or not
    # @return [nil]
    def start_universal_transcode(has_mde, path, media_index, part_index, protocol, opts = {})
      start_universal_transcode_with_http_info(has_mde, path, media_index, part_index, protocol, opts)
      nil
    end

    # Start Universal Transcode
    # Begin a Universal Transcode Session
    # @param has_mde [Float] Whether the media item has MDE
    # @param path [String] The path to the media item to transcode
    # @param media_index [Float] The index of the media item to transcode
    # @param part_index [Float] The index of the part to transcode
    # @param protocol [String] The protocol to use for the transcode session
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :fast_seek Whether to use fast seek or not
    # @option opts [Float] :direct_play Whether to use direct play or not
    # @option opts [Float] :direct_stream Whether to use direct stream or not
    # @option opts [Float] :subtitle_size The size of the subtitles
    # @option opts [String] :subtites The subtitles
    # @option opts [Float] :audio_boost The audio boost
    # @option opts [String] :location The location of the transcode session
    # @option opts [Float] :media_buffer_size The size of the media buffer
    # @option opts [String] :session The session ID
    # @option opts [Float] :add_debug_overlay Whether to add a debug overlay or not
    # @option opts [Float] :auto_adjust_quality Whether to auto adjust quality or not
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def start_universal_transcode_with_http_info(has_mde, path, media_index, part_index, protocol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VideoApi.start_universal_transcode ...'
      end
      # verify the required parameter 'has_mde' is set
      if @api_client.config.client_side_validation && has_mde.nil?
        fail ArgumentError, "Missing the required parameter 'has_mde' when calling VideoApi.start_universal_transcode"
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling VideoApi.start_universal_transcode"
      end
      # verify the required parameter 'media_index' is set
      if @api_client.config.client_side_validation && media_index.nil?
        fail ArgumentError, "Missing the required parameter 'media_index' when calling VideoApi.start_universal_transcode"
      end
      # verify the required parameter 'part_index' is set
      if @api_client.config.client_side_validation && part_index.nil?
        fail ArgumentError, "Missing the required parameter 'part_index' when calling VideoApi.start_universal_transcode"
      end
      # verify the required parameter 'protocol' is set
      if @api_client.config.client_side_validation && protocol.nil?
        fail ArgumentError, "Missing the required parameter 'protocol' when calling VideoApi.start_universal_transcode"
      end
      # resource path
      local_var_path = '/video/:/transcode/universal/start.mpd'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hasMDE'] = has_mde
      query_params[:'path'] = path
      query_params[:'mediaIndex'] = media_index
      query_params[:'partIndex'] = part_index
      query_params[:'protocol'] = protocol
      query_params[:'fastSeek'] = opts[:'fast_seek'] if !opts[:'fast_seek'].nil?
      query_params[:'directPlay'] = opts[:'direct_play'] if !opts[:'direct_play'].nil?
      query_params[:'directStream'] = opts[:'direct_stream'] if !opts[:'direct_stream'].nil?
      query_params[:'subtitleSize'] = opts[:'subtitle_size'] if !opts[:'subtitle_size'].nil?
      query_params[:'subtites'] = opts[:'subtites'] if !opts[:'subtites'].nil?
      query_params[:'audioBoost'] = opts[:'audio_boost'] if !opts[:'audio_boost'].nil?
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'mediaBufferSize'] = opts[:'media_buffer_size'] if !opts[:'media_buffer_size'].nil?
      query_params[:'session'] = opts[:'session'] if !opts[:'session'].nil?
      query_params[:'addDebugOverlay'] = opts[:'add_debug_overlay'] if !opts[:'add_debug_overlay'].nil?
      query_params[:'autoAdjustQuality'] = opts[:'auto_adjust_quality'] if !opts[:'auto_adjust_quality'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"VideoApi.start_universal_transcode",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideoApi#start_universal_transcode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
