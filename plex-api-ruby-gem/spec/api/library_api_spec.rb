=begin
#Plex-API

#An Open API Spec for interacting with Plex.tv and Plex Servers

The version of the OpenAPI document: 0.0.3
Contact: Lukeslakemail@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::LibraryApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'LibraryApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::LibraryApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of LibraryApi' do
    it 'should create an instance of LibraryApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::LibraryApi)
    end
  end

  # unit tests for delete_library
  # Delete Library Section
  # Delate a library using a specific section
  # @param section_id the Id of the library to query
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_library test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_file_hash
  # Get Hash Value
  # This resource returns hash values for local files
  # @param url This is the path to the local file, must be prefixed by &#x60;file://&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :type Item type
  # @return [nil]
  describe 'get_file_hash test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_libraries
  # Get All Libraries
  # A library section (commonly referred to as just a library) is a collection of media.  Libraries are typed, and depending on their type provide either a flat or a hierarchical view of the media.  For example, a music library has an artist &gt; albums &gt; tracks structure, whereas a movie library is flat.  Libraries have features beyond just being a collection of media; for starters, they include information about supported types, filters and sorts.  This allows a client to provide a rich interface around the media (e.g. allow sorting movies by release year). 
  # @param [Hash] opts the optional parameters
  # @return [GetLibraries200Response]
  describe 'get_libraries test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_library
  # Get Library Details
  # ## Library Details Endpoint  This endpoint provides comprehensive details about the library, focusing on organizational aspects rather than the content itself.     The details include:  ### Directories Organized into three categories:  - **Primary Directories**:    - Used in some clients for quick access to media subsets (e.g., \&quot;All\&quot;, \&quot;On Deck\&quot;).   - Most can be replicated via media queries.   - Customizable by users.  - **Secondary Directories**:   - Marked with &#x60;secondary&#x3D;\&quot;1\&quot;&#x60;.   - Used in older clients for structured navigation.  - **Special Directories**:   - Includes a \&quot;By Folder\&quot; entry for filesystem-based browsing.   - Contains an obsolete &#x60;search&#x3D;\&quot;1\&quot;&#x60; entry for on-the-fly search dialog creation.  ### Types Each type in the library comes with a set of filters and sorts, aiding in building dynamic media controls:  - **Type Object Attributes**:   - &#x60;key&#x60;: Endpoint for the media list of this type.   - &#x60;type&#x60;: Metadata type (if standard Plex type).   - &#x60;title&#x60;: Title for this content type (e.g., \&quot;Movies\&quot;).  - **Filter Objects**:   - Subset of the media query language.   - Attributes include &#x60;filter&#x60; (name), &#x60;filterType&#x60; (data type), &#x60;key&#x60; (endpoint for value range), and &#x60;title&#x60;.  - **Sort Objects**:   - Description of sort fields.   - Attributes include &#x60;defaultDirection&#x60; (asc/desc), &#x60;descKey&#x60; and &#x60;key&#x60; (sort parameters), and &#x60;title&#x60;.  &gt; **Note**: Filters and sorts are optional; without them, no filtering controls are rendered. 
  # @param section_id the Id of the library to query
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :include_details Whether or not to include details for a section (types, filters, and sorts).  Only exists for backwards compatibility, media providers other than the server libraries have it on always. 
  # @return [GetLibrary200Response]
  describe 'get_library test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_metadata
  # Get Items Metadata
  # This endpoint will return the metadata of a library item specified with the ratingKey. 
  # @param rating_key the id of the library item to return the children of.
  # @param [Hash] opts the optional parameters
  # @return [GetMetadata200Response]
  describe 'get_metadata test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_metadata_children
  # Get Items Children
  # This endpoint will return the children of of a library item specified with the ratingKey. 
  # @param rating_key the id of the library item to return the children of.
  # @param [Hash] opts the optional parameters
  # @return [GetMetadataChildren200Response]
  describe 'get_metadata_children test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_on_deck
  # Get On Deck
  # This endpoint will return the on deck content. 
  # @param [Hash] opts the optional parameters
  # @return [GetOnDeck200Response]
  describe 'get_on_deck test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_recently_added
  # Get Recently Added
  # This endpoint will return the recently added content. 
  # @param [Hash] opts the optional parameters
  # @return [GetRecentlyAdded200Response]
  describe 'get_recently_added test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for refresh_library
  # Refresh Library
  # This endpoint Refreshes the library. 
  # @param section_id the Id of the library to refresh
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'refresh_library test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
