=begin
#Plex-API

#An Open API Spec for interacting with Plex.tv and Plex Servers

The version of the OpenAPI document: 0.0.3
Contact: Lukeslakemail@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  class GetServerCapabilities200ResponseMediaContainer
    attr_accessor :size

    attr_accessor :allow_camera_upload

    attr_accessor :allow_channel_access

    attr_accessor :allow_media_deletion

    attr_accessor :allow_sharing

    attr_accessor :allow_sync

    attr_accessor :allow_tuners

    attr_accessor :background_processing

    attr_accessor :certificate

    attr_accessor :companion_proxy

    attr_accessor :country_code

    attr_accessor :diagnostics

    attr_accessor :event_stream

    attr_accessor :friendly_name

    attr_accessor :hub_search

    attr_accessor :item_clusters

    attr_accessor :livetv

    attr_accessor :machine_identifier

    attr_accessor :media_providers

    attr_accessor :multiuser

    attr_accessor :music_analysis

    attr_accessor :my_plex

    attr_accessor :my_plex_mapping_state

    attr_accessor :my_plex_signin_state

    attr_accessor :my_plex_subscription

    attr_accessor :my_plex_username

    attr_accessor :offline_transcode

    attr_accessor :owner_features

    attr_accessor :photo_auto_tag

    attr_accessor :platform

    attr_accessor :platform_version

    attr_accessor :plugin_host

    attr_accessor :push_notifications

    attr_accessor :read_only_libraries

    attr_accessor :streaming_brain_abr_version

    attr_accessor :streaming_brain_version

    attr_accessor :sync

    attr_accessor :transcoder_active_video_sessions

    attr_accessor :transcoder_audio

    attr_accessor :transcoder_lyrics

    attr_accessor :transcoder_photo

    attr_accessor :transcoder_subtitles

    attr_accessor :transcoder_video

    attr_accessor :transcoder_video_bitrates

    attr_accessor :transcoder_video_qualities

    attr_accessor :transcoder_video_resolutions

    attr_accessor :updated_at

    attr_accessor :updater

    attr_accessor :version

    attr_accessor :voice_search

    attr_accessor :directory

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'size' => :'size',
        :'allow_camera_upload' => :'allowCameraUpload',
        :'allow_channel_access' => :'allowChannelAccess',
        :'allow_media_deletion' => :'allowMediaDeletion',
        :'allow_sharing' => :'allowSharing',
        :'allow_sync' => :'allowSync',
        :'allow_tuners' => :'allowTuners',
        :'background_processing' => :'backgroundProcessing',
        :'certificate' => :'certificate',
        :'companion_proxy' => :'companionProxy',
        :'country_code' => :'countryCode',
        :'diagnostics' => :'diagnostics',
        :'event_stream' => :'eventStream',
        :'friendly_name' => :'friendlyName',
        :'hub_search' => :'hubSearch',
        :'item_clusters' => :'itemClusters',
        :'livetv' => :'livetv',
        :'machine_identifier' => :'machineIdentifier',
        :'media_providers' => :'mediaProviders',
        :'multiuser' => :'multiuser',
        :'music_analysis' => :'musicAnalysis',
        :'my_plex' => :'myPlex',
        :'my_plex_mapping_state' => :'myPlexMappingState',
        :'my_plex_signin_state' => :'myPlexSigninState',
        :'my_plex_subscription' => :'myPlexSubscription',
        :'my_plex_username' => :'myPlexUsername',
        :'offline_transcode' => :'offlineTranscode',
        :'owner_features' => :'ownerFeatures',
        :'photo_auto_tag' => :'photoAutoTag',
        :'platform' => :'platform',
        :'platform_version' => :'platformVersion',
        :'plugin_host' => :'pluginHost',
        :'push_notifications' => :'pushNotifications',
        :'read_only_libraries' => :'readOnlyLibraries',
        :'streaming_brain_abr_version' => :'streamingBrainABRVersion',
        :'streaming_brain_version' => :'streamingBrainVersion',
        :'sync' => :'sync',
        :'transcoder_active_video_sessions' => :'transcoderActiveVideoSessions',
        :'transcoder_audio' => :'transcoderAudio',
        :'transcoder_lyrics' => :'transcoderLyrics',
        :'transcoder_photo' => :'transcoderPhoto',
        :'transcoder_subtitles' => :'transcoderSubtitles',
        :'transcoder_video' => :'transcoderVideo',
        :'transcoder_video_bitrates' => :'transcoderVideoBitrates',
        :'transcoder_video_qualities' => :'transcoderVideoQualities',
        :'transcoder_video_resolutions' => :'transcoderVideoResolutions',
        :'updated_at' => :'updatedAt',
        :'updater' => :'updater',
        :'version' => :'version',
        :'voice_search' => :'voiceSearch',
        :'directory' => :'Directory'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'size' => :'Float',
        :'allow_camera_upload' => :'Boolean',
        :'allow_channel_access' => :'Boolean',
        :'allow_media_deletion' => :'Boolean',
        :'allow_sharing' => :'Boolean',
        :'allow_sync' => :'Boolean',
        :'allow_tuners' => :'Boolean',
        :'background_processing' => :'Boolean',
        :'certificate' => :'Boolean',
        :'companion_proxy' => :'Boolean',
        :'country_code' => :'String',
        :'diagnostics' => :'String',
        :'event_stream' => :'Boolean',
        :'friendly_name' => :'String',
        :'hub_search' => :'Boolean',
        :'item_clusters' => :'Boolean',
        :'livetv' => :'Float',
        :'machine_identifier' => :'String',
        :'media_providers' => :'Boolean',
        :'multiuser' => :'Boolean',
        :'music_analysis' => :'Float',
        :'my_plex' => :'Boolean',
        :'my_plex_mapping_state' => :'String',
        :'my_plex_signin_state' => :'String',
        :'my_plex_subscription' => :'Boolean',
        :'my_plex_username' => :'String',
        :'offline_transcode' => :'Float',
        :'owner_features' => :'String',
        :'photo_auto_tag' => :'Boolean',
        :'platform' => :'String',
        :'platform_version' => :'String',
        :'plugin_host' => :'Boolean',
        :'push_notifications' => :'Boolean',
        :'read_only_libraries' => :'Boolean',
        :'streaming_brain_abr_version' => :'Float',
        :'streaming_brain_version' => :'Float',
        :'sync' => :'Boolean',
        :'transcoder_active_video_sessions' => :'Float',
        :'transcoder_audio' => :'Boolean',
        :'transcoder_lyrics' => :'Boolean',
        :'transcoder_photo' => :'Boolean',
        :'transcoder_subtitles' => :'Boolean',
        :'transcoder_video' => :'Boolean',
        :'transcoder_video_bitrates' => :'String',
        :'transcoder_video_qualities' => :'String',
        :'transcoder_video_resolutions' => :'String',
        :'updated_at' => :'Float',
        :'updater' => :'Boolean',
        :'version' => :'String',
        :'voice_search' => :'Boolean',
        :'directory' => :'Array<GetServerCapabilities200ResponseMediaContainerDirectoryInner>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::GetServerCapabilities200ResponseMediaContainer` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::GetServerCapabilities200ResponseMediaContainer`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.key?(:'allow_camera_upload')
        self.allow_camera_upload = attributes[:'allow_camera_upload']
      end

      if attributes.key?(:'allow_channel_access')
        self.allow_channel_access = attributes[:'allow_channel_access']
      end

      if attributes.key?(:'allow_media_deletion')
        self.allow_media_deletion = attributes[:'allow_media_deletion']
      end

      if attributes.key?(:'allow_sharing')
        self.allow_sharing = attributes[:'allow_sharing']
      end

      if attributes.key?(:'allow_sync')
        self.allow_sync = attributes[:'allow_sync']
      end

      if attributes.key?(:'allow_tuners')
        self.allow_tuners = attributes[:'allow_tuners']
      end

      if attributes.key?(:'background_processing')
        self.background_processing = attributes[:'background_processing']
      end

      if attributes.key?(:'certificate')
        self.certificate = attributes[:'certificate']
      end

      if attributes.key?(:'companion_proxy')
        self.companion_proxy = attributes[:'companion_proxy']
      end

      if attributes.key?(:'country_code')
        self.country_code = attributes[:'country_code']
      end

      if attributes.key?(:'diagnostics')
        self.diagnostics = attributes[:'diagnostics']
      end

      if attributes.key?(:'event_stream')
        self.event_stream = attributes[:'event_stream']
      end

      if attributes.key?(:'friendly_name')
        self.friendly_name = attributes[:'friendly_name']
      end

      if attributes.key?(:'hub_search')
        self.hub_search = attributes[:'hub_search']
      end

      if attributes.key?(:'item_clusters')
        self.item_clusters = attributes[:'item_clusters']
      end

      if attributes.key?(:'livetv')
        self.livetv = attributes[:'livetv']
      end

      if attributes.key?(:'machine_identifier')
        self.machine_identifier = attributes[:'machine_identifier']
      end

      if attributes.key?(:'media_providers')
        self.media_providers = attributes[:'media_providers']
      end

      if attributes.key?(:'multiuser')
        self.multiuser = attributes[:'multiuser']
      end

      if attributes.key?(:'music_analysis')
        self.music_analysis = attributes[:'music_analysis']
      end

      if attributes.key?(:'my_plex')
        self.my_plex = attributes[:'my_plex']
      end

      if attributes.key?(:'my_plex_mapping_state')
        self.my_plex_mapping_state = attributes[:'my_plex_mapping_state']
      end

      if attributes.key?(:'my_plex_signin_state')
        self.my_plex_signin_state = attributes[:'my_plex_signin_state']
      end

      if attributes.key?(:'my_plex_subscription')
        self.my_plex_subscription = attributes[:'my_plex_subscription']
      end

      if attributes.key?(:'my_plex_username')
        self.my_plex_username = attributes[:'my_plex_username']
      end

      if attributes.key?(:'offline_transcode')
        self.offline_transcode = attributes[:'offline_transcode']
      end

      if attributes.key?(:'owner_features')
        self.owner_features = attributes[:'owner_features']
      end

      if attributes.key?(:'photo_auto_tag')
        self.photo_auto_tag = attributes[:'photo_auto_tag']
      end

      if attributes.key?(:'platform')
        self.platform = attributes[:'platform']
      end

      if attributes.key?(:'platform_version')
        self.platform_version = attributes[:'platform_version']
      end

      if attributes.key?(:'plugin_host')
        self.plugin_host = attributes[:'plugin_host']
      end

      if attributes.key?(:'push_notifications')
        self.push_notifications = attributes[:'push_notifications']
      end

      if attributes.key?(:'read_only_libraries')
        self.read_only_libraries = attributes[:'read_only_libraries']
      end

      if attributes.key?(:'streaming_brain_abr_version')
        self.streaming_brain_abr_version = attributes[:'streaming_brain_abr_version']
      end

      if attributes.key?(:'streaming_brain_version')
        self.streaming_brain_version = attributes[:'streaming_brain_version']
      end

      if attributes.key?(:'sync')
        self.sync = attributes[:'sync']
      end

      if attributes.key?(:'transcoder_active_video_sessions')
        self.transcoder_active_video_sessions = attributes[:'transcoder_active_video_sessions']
      end

      if attributes.key?(:'transcoder_audio')
        self.transcoder_audio = attributes[:'transcoder_audio']
      end

      if attributes.key?(:'transcoder_lyrics')
        self.transcoder_lyrics = attributes[:'transcoder_lyrics']
      end

      if attributes.key?(:'transcoder_photo')
        self.transcoder_photo = attributes[:'transcoder_photo']
      end

      if attributes.key?(:'transcoder_subtitles')
        self.transcoder_subtitles = attributes[:'transcoder_subtitles']
      end

      if attributes.key?(:'transcoder_video')
        self.transcoder_video = attributes[:'transcoder_video']
      end

      if attributes.key?(:'transcoder_video_bitrates')
        self.transcoder_video_bitrates = attributes[:'transcoder_video_bitrates']
      end

      if attributes.key?(:'transcoder_video_qualities')
        self.transcoder_video_qualities = attributes[:'transcoder_video_qualities']
      end

      if attributes.key?(:'transcoder_video_resolutions')
        self.transcoder_video_resolutions = attributes[:'transcoder_video_resolutions']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'updater')
        self.updater = attributes[:'updater']
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.key?(:'voice_search')
        self.voice_search = attributes[:'voice_search']
      end

      if attributes.key?(:'directory')
        if (value = attributes[:'directory']).is_a?(Array)
          self.directory = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          size == o.size &&
          allow_camera_upload == o.allow_camera_upload &&
          allow_channel_access == o.allow_channel_access &&
          allow_media_deletion == o.allow_media_deletion &&
          allow_sharing == o.allow_sharing &&
          allow_sync == o.allow_sync &&
          allow_tuners == o.allow_tuners &&
          background_processing == o.background_processing &&
          certificate == o.certificate &&
          companion_proxy == o.companion_proxy &&
          country_code == o.country_code &&
          diagnostics == o.diagnostics &&
          event_stream == o.event_stream &&
          friendly_name == o.friendly_name &&
          hub_search == o.hub_search &&
          item_clusters == o.item_clusters &&
          livetv == o.livetv &&
          machine_identifier == o.machine_identifier &&
          media_providers == o.media_providers &&
          multiuser == o.multiuser &&
          music_analysis == o.music_analysis &&
          my_plex == o.my_plex &&
          my_plex_mapping_state == o.my_plex_mapping_state &&
          my_plex_signin_state == o.my_plex_signin_state &&
          my_plex_subscription == o.my_plex_subscription &&
          my_plex_username == o.my_plex_username &&
          offline_transcode == o.offline_transcode &&
          owner_features == o.owner_features &&
          photo_auto_tag == o.photo_auto_tag &&
          platform == o.platform &&
          platform_version == o.platform_version &&
          plugin_host == o.plugin_host &&
          push_notifications == o.push_notifications &&
          read_only_libraries == o.read_only_libraries &&
          streaming_brain_abr_version == o.streaming_brain_abr_version &&
          streaming_brain_version == o.streaming_brain_version &&
          sync == o.sync &&
          transcoder_active_video_sessions == o.transcoder_active_video_sessions &&
          transcoder_audio == o.transcoder_audio &&
          transcoder_lyrics == o.transcoder_lyrics &&
          transcoder_photo == o.transcoder_photo &&
          transcoder_subtitles == o.transcoder_subtitles &&
          transcoder_video == o.transcoder_video &&
          transcoder_video_bitrates == o.transcoder_video_bitrates &&
          transcoder_video_qualities == o.transcoder_video_qualities &&
          transcoder_video_resolutions == o.transcoder_video_resolutions &&
          updated_at == o.updated_at &&
          updater == o.updater &&
          version == o.version &&
          voice_search == o.voice_search &&
          directory == o.directory
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [size, allow_camera_upload, allow_channel_access, allow_media_deletion, allow_sharing, allow_sync, allow_tuners, background_processing, certificate, companion_proxy, country_code, diagnostics, event_stream, friendly_name, hub_search, item_clusters, livetv, machine_identifier, media_providers, multiuser, music_analysis, my_plex, my_plex_mapping_state, my_plex_signin_state, my_plex_subscription, my_plex_username, offline_transcode, owner_features, photo_auto_tag, platform, platform_version, plugin_host, push_notifications, read_only_libraries, streaming_brain_abr_version, streaming_brain_version, sync, transcoder_active_video_sessions, transcoder_audio, transcoder_lyrics, transcoder_photo, transcoder_subtitles, transcoder_video, transcoder_video_bitrates, transcoder_video_qualities, transcoder_video_resolutions, updated_at, updater, version, voice_search, directory].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
