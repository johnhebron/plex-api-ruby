=begin
#Plex-API

#An Open API Spec for interacting with Plex.tv and Plex Servers

The version of the OpenAPI document: 0.0.3
Contact: Lukeslakemail@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module OpenapiClient
  class ServerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Available Clients
    # Get Available Clients
    # @param [Hash] opts the optional parameters
    # @return [GetAvailableClients200Response]
    def get_available_clients(opts = {})
      data, _status_code, _headers = get_available_clients_with_http_info(opts)
      data
    end

    # Get Available Clients
    # Get Available Clients
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAvailableClients200Response, Integer, Hash)>] GetAvailableClients200Response data, response status code and response headers
    def get_available_clients_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServerApi.get_available_clients ...'
      end
      # resource path
      local_var_path = '/clients'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAvailableClients200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"ServerApi.get_available_clients",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServerApi#get_available_clients\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Devices
    # Get Devices
    # @param [Hash] opts the optional parameters
    # @return [GetDevices200Response]
    def get_devices(opts = {})
      data, _status_code, _headers = get_devices_with_http_info(opts)
      data
    end

    # Get Devices
    # Get Devices
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDevices200Response, Integer, Hash)>] GetDevices200Response data, response status code and response headers
    def get_devices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServerApi.get_devices ...'
      end
      # resource path
      local_var_path = '/devices'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDevices200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"ServerApi.get_devices",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServerApi#get_devices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get MyPlex Account
    # Returns MyPlex Account Information
    # @param [Hash] opts the optional parameters
    # @return [GetMyPlexAccount200Response]
    def get_my_plex_account(opts = {})
      data, _status_code, _headers = get_my_plex_account_with_http_info(opts)
      data
    end

    # Get MyPlex Account
    # Returns MyPlex Account Information
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMyPlexAccount200Response, Integer, Hash)>] GetMyPlexAccount200Response data, response status code and response headers
    def get_my_plex_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServerApi.get_my_plex_account ...'
      end
      # resource path
      local_var_path = '/myplex/account'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMyPlexAccount200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"ServerApi.get_my_plex_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServerApi#get_my_plex_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Resized Photo
    # Plex's Photo transcoder is used throughout the service to serve images at specified sizes. 
    # @param width [Float] The width for the resized photo
    # @param height [Float] The height for the resized photo
    # @param opacity [Integer] The opacity for the resized photo
    # @param blur [Float] The width for the resized photo
    # @param min_size [Integer] images are always scaled proportionally. A value of &#39;1&#39; in minSize will make the smaller native dimension the dimension resized against.
    # @param upscale [Integer] allow images to be resized beyond native dimensions.
    # @param url [String] path to image within Plex
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_resized_photo(width, height, opacity, blur, min_size, upscale, url, opts = {})
      get_resized_photo_with_http_info(width, height, opacity, blur, min_size, upscale, url, opts)
      nil
    end

    # Get a Resized Photo
    # Plex&#39;s Photo transcoder is used throughout the service to serve images at specified sizes. 
    # @param width [Float] The width for the resized photo
    # @param height [Float] The height for the resized photo
    # @param opacity [Integer] The opacity for the resized photo
    # @param blur [Float] The width for the resized photo
    # @param min_size [Integer] images are always scaled proportionally. A value of &#39;1&#39; in minSize will make the smaller native dimension the dimension resized against.
    # @param upscale [Integer] allow images to be resized beyond native dimensions.
    # @param url [String] path to image within Plex
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_resized_photo_with_http_info(width, height, opacity, blur, min_size, upscale, url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServerApi.get_resized_photo ...'
      end
      # verify the required parameter 'width' is set
      if @api_client.config.client_side_validation && width.nil?
        fail ArgumentError, "Missing the required parameter 'width' when calling ServerApi.get_resized_photo"
      end
      # verify the required parameter 'height' is set
      if @api_client.config.client_side_validation && height.nil?
        fail ArgumentError, "Missing the required parameter 'height' when calling ServerApi.get_resized_photo"
      end
      # verify the required parameter 'opacity' is set
      if @api_client.config.client_side_validation && opacity.nil?
        fail ArgumentError, "Missing the required parameter 'opacity' when calling ServerApi.get_resized_photo"
      end
      if @api_client.config.client_side_validation && opacity > 100
        fail ArgumentError, 'invalid value for "opacity" when calling ServerApi.get_resized_photo, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && opacity < 1
        fail ArgumentError, 'invalid value for "opacity" when calling ServerApi.get_resized_photo, must be greater than or equal to 1.'
      end

      # verify the required parameter 'blur' is set
      if @api_client.config.client_side_validation && blur.nil?
        fail ArgumentError, "Missing the required parameter 'blur' when calling ServerApi.get_resized_photo"
      end
      # verify the required parameter 'min_size' is set
      if @api_client.config.client_side_validation && min_size.nil?
        fail ArgumentError, "Missing the required parameter 'min_size' when calling ServerApi.get_resized_photo"
      end
      # verify enum value
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && !allowable_values.include?(min_size)
        fail ArgumentError, "invalid value for \"min_size\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'upscale' is set
      if @api_client.config.client_side_validation && upscale.nil?
        fail ArgumentError, "Missing the required parameter 'upscale' when calling ServerApi.get_resized_photo"
      end
      # verify enum value
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && !allowable_values.include?(upscale)
        fail ArgumentError, "invalid value for \"upscale\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling ServerApi.get_resized_photo"
      end
      # resource path
      local_var_path = '/photo/:/transcode'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'width'] = width
      query_params[:'height'] = height
      query_params[:'opacity'] = opacity
      query_params[:'blur'] = blur
      query_params[:'minSize'] = min_size
      query_params[:'upscale'] = upscale
      query_params[:'url'] = url

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"ServerApi.get_resized_photo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServerApi#get_resized_photo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Server Capabilities
    # Server Capabilities
    # @param [Hash] opts the optional parameters
    # @return [GetServerCapabilities200Response]
    def get_server_capabilities(opts = {})
      data, _status_code, _headers = get_server_capabilities_with_http_info(opts)
      data
    end

    # Server Capabilities
    # Server Capabilities
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetServerCapabilities200Response, Integer, Hash)>] GetServerCapabilities200Response data, response status code and response headers
    def get_server_capabilities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServerApi.get_server_capabilities ...'
      end
      # resource path
      local_var_path = '/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetServerCapabilities200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"ServerApi.get_server_capabilities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServerApi#get_server_capabilities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Server Identity
    # Get Server Identity
    # @param [Hash] opts the optional parameters
    # @return [GetServerIdentity200Response]
    def get_server_identity(opts = {})
      data, _status_code, _headers = get_server_identity_with_http_info(opts)
      data
    end

    # Get Server Identity
    # Get Server Identity
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetServerIdentity200Response, Integer, Hash)>] GetServerIdentity200Response data, response status code and response headers
    def get_server_identity_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServerApi.get_server_identity ...'
      end
      # resource path
      local_var_path = '/identity'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetServerIdentity200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"ServerApi.get_server_identity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServerApi#get_server_identity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Server List
    # Get Server List
    # @param [Hash] opts the optional parameters
    # @return [GetServerList200Response]
    def get_server_list(opts = {})
      data, _status_code, _headers = get_server_list_with_http_info(opts)
      data
    end

    # Get Server List
    # Get Server List
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetServerList200Response, Integer, Hash)>] GetServerList200Response data, response status code and response headers
    def get_server_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServerApi.get_server_list ...'
      end
      # resource path
      local_var_path = '/servers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetServerList200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"ServerApi.get_server_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServerApi#get_server_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Server Preferences
    # Get Server Preferences
    # @param [Hash] opts the optional parameters
    # @return [GetServerPreferences200Response]
    def get_server_preferences(opts = {})
      data, _status_code, _headers = get_server_preferences_with_http_info(opts)
      data
    end

    # Get Server Preferences
    # Get Server Preferences
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetServerPreferences200Response, Integer, Hash)>] GetServerPreferences200Response data, response status code and response headers
    def get_server_preferences_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServerApi.get_server_preferences ...'
      end
      # resource path
      local_var_path = '/:/prefs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetServerPreferences200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"ServerApi.get_server_preferences",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServerApi#get_server_preferences\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
