=begin
#Plex-API

#An Open API Spec for interacting with Plex.tv and Plex Servers

The version of the OpenAPI document: 0.0.3
Contact: Lukeslakemail@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module OpenapiClient
  class SearchApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Search Results
    # This will search the database for the string provided.
    # @param query [String] The search query string to use
    # @param [Hash] opts the optional parameters
    # @return [GetSearchResults200Response]
    def get_search_results(query, opts = {})
      data, _status_code, _headers = get_search_results_with_http_info(query, opts)
      data
    end

    # Get Search Results
    # This will search the database for the string provided.
    # @param query [String] The search query string to use
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSearchResults200Response, Integer, Hash)>] GetSearchResults200Response data, response status code and response headers
    def get_search_results_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.get_search_results ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling SearchApi.get_search_results"
      end
      # resource path
      local_var_path = '/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSearchResults200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"SearchApi.get_search_results",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#get_search_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform a search
    # This endpoint performs a search across all library sections, or a single section, and returns matches as hubs, split up by type. It performs spell checking, looks for partial matches, and orders the hubs based on quality of results. In addition, based on matches, it will return other related matches (e.g. for a genre match, it may return movies in that genre, or for an actor match, movies with that actor).  In the response's items, the following extra attributes are returned to further describe or disambiguate the result:  - `reason`: The reason for the result, if not because of a direct search term match; can be either:   - `section`: There are multiple identical results from different sections.   - `originalTitle`: There was a search term match from the original title field (sometimes those can be very different or in a foreign language).   - `<hub identifier>`: If the reason for the result is due to a result in another hub, the source hub identifier is returned. For example, if the search is for \"dylan\" then Bob Dylan may be returned as an artist result, an a few of his albums returned as album results with a reason code of `artist` (the identifier of that particular hub). Or if the search is for \"arnold\", there might be movie results returned with a reason of `actor` - `reasonTitle`: The string associated with the reason code. For a section reason, it'll be the section name; For a hub identifier, it'll be a string associated with the match (e.g. `Arnold Schwarzenegger` for movies which were returned because the search was for \"arnold\"). - `reasonID`: The ID of the item associated with the reason for the result. This might be a section ID, a tag ID, an artist ID, or a show ID.  This request is intended to be very fast, and called as the user types. 
    # @param query [String] The query term
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :section_id This gives context to the search, and can result in re-ordering of search result hubs
    # @option opts [Float] :limit The number of items to return per hub (default to 3)
    # @return [nil]
    def perform_search(query, opts = {})
      perform_search_with_http_info(query, opts)
      nil
    end

    # Perform a search
    # This endpoint performs a search across all library sections, or a single section, and returns matches as hubs, split up by type. It performs spell checking, looks for partial matches, and orders the hubs based on quality of results. In addition, based on matches, it will return other related matches (e.g. for a genre match, it may return movies in that genre, or for an actor match, movies with that actor).  In the response&#39;s items, the following extra attributes are returned to further describe or disambiguate the result:  - &#x60;reason&#x60;: The reason for the result, if not because of a direct search term match; can be either:   - &#x60;section&#x60;: There are multiple identical results from different sections.   - &#x60;originalTitle&#x60;: There was a search term match from the original title field (sometimes those can be very different or in a foreign language).   - &#x60;&lt;hub identifier&gt;&#x60;: If the reason for the result is due to a result in another hub, the source hub identifier is returned. For example, if the search is for \&quot;dylan\&quot; then Bob Dylan may be returned as an artist result, an a few of his albums returned as album results with a reason code of &#x60;artist&#x60; (the identifier of that particular hub). Or if the search is for \&quot;arnold\&quot;, there might be movie results returned with a reason of &#x60;actor&#x60; - &#x60;reasonTitle&#x60;: The string associated with the reason code. For a section reason, it&#39;ll be the section name; For a hub identifier, it&#39;ll be a string associated with the match (e.g. &#x60;Arnold Schwarzenegger&#x60; for movies which were returned because the search was for \&quot;arnold\&quot;). - &#x60;reasonID&#x60;: The ID of the item associated with the reason for the result. This might be a section ID, a tag ID, an artist ID, or a show ID.  This request is intended to be very fast, and called as the user types. 
    # @param query [String] The query term
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :section_id This gives context to the search, and can result in re-ordering of search result hubs
    # @option opts [Float] :limit The number of items to return per hub (default to 3)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def perform_search_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.perform_search ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling SearchApi.perform_search"
      end
      # resource path
      local_var_path = '/hubs/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'sectionId'] = opts[:'section_id'] if !opts[:'section_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"SearchApi.perform_search",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#perform_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform a voice search
    # This endpoint performs a search specifically tailored towards voice or other imprecise input which may work badly with the substring and spell-checking heuristics used by the `/hubs/search` endpoint.  It uses a [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance) heuristic to search titles, and as such is much slower than the other search endpoint.  Whenever possible, clients should limit the search to the appropriate type.  Results, as well as their containing per-type hubs, contain a `distance` attribute which can be used to judge result quality. 
    # @param query [String] The query term
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :section_id This gives context to the search, and can result in re-ordering of search result hubs
    # @option opts [Float] :limit The number of items to return per hub (default to 3)
    # @return [nil]
    def perform_voice_search(query, opts = {})
      perform_voice_search_with_http_info(query, opts)
      nil
    end

    # Perform a voice search
    # This endpoint performs a search specifically tailored towards voice or other imprecise input which may work badly with the substring and spell-checking heuristics used by the &#x60;/hubs/search&#x60; endpoint.  It uses a [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance) heuristic to search titles, and as such is much slower than the other search endpoint.  Whenever possible, clients should limit the search to the appropriate type.  Results, as well as their containing per-type hubs, contain a &#x60;distance&#x60; attribute which can be used to judge result quality. 
    # @param query [String] The query term
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :section_id This gives context to the search, and can result in re-ordering of search result hubs
    # @option opts [Float] :limit The number of items to return per hub (default to 3)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def perform_voice_search_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.perform_voice_search ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling SearchApi.perform_voice_search"
      end
      # resource path
      local_var_path = '/hubs/search/voice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'sectionId'] = opts[:'section_id'] if !opts[:'section_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"SearchApi.perform_voice_search",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#perform_voice_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
