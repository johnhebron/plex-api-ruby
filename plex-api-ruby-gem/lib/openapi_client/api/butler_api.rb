=begin
#Plex-API

#An Open API Spec for interacting with Plex.tv and Plex Servers

The version of the OpenAPI document: 0.0.3
Contact: Lukeslakemail@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module OpenapiClient
  class ButlerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Butler tasks
    # Returns a list of butler tasks
    # @param [Hash] opts the optional parameters
    # @return [GetButlerTasks200Response]
    def get_butler_tasks(opts = {})
      data, _status_code, _headers = get_butler_tasks_with_http_info(opts)
      data
    end

    # Get Butler tasks
    # Returns a list of butler tasks
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetButlerTasks200Response, Integer, Hash)>] GetButlerTasks200Response data, response status code and response headers
    def get_butler_tasks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ButlerApi.get_butler_tasks ...'
      end
      # resource path
      local_var_path = '/butler'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetButlerTasks200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"ButlerApi.get_butler_tasks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ButlerApi#get_butler_tasks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start all Butler tasks
    # This endpoint will attempt to start all Butler tasks that are enabled in the settings. Butler tasks normally run automatically during a time window configured on the server's Settings page but can be manually started using this endpoint. Tasks will run with the following criteria: 1. Any tasks not scheduled to run on the current day will be skipped. 2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately. 3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window. 4. If we are outside the configured window, the task will start immediately. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def start_all_tasks(opts = {})
      start_all_tasks_with_http_info(opts)
      nil
    end

    # Start all Butler tasks
    # This endpoint will attempt to start all Butler tasks that are enabled in the settings. Butler tasks normally run automatically during a time window configured on the server&#39;s Settings page but can be manually started using this endpoint. Tasks will run with the following criteria: 1. Any tasks not scheduled to run on the current day will be skipped. 2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately. 3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window. 4. If we are outside the configured window, the task will start immediately. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def start_all_tasks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ButlerApi.start_all_tasks ...'
      end
      # resource path
      local_var_path = '/butler'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"ButlerApi.start_all_tasks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ButlerApi#start_all_tasks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start a single Butler task
    # This endpoint will attempt to start a single Butler task that is enabled in the settings. Butler tasks normally run automatically during a time window configured on the server's Settings page but can be manually started using this endpoint. Tasks will run with the following criteria: 1. Any tasks not scheduled to run on the current day will be skipped. 2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately. 3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window. 4. If we are outside the configured window, the task will start immediately. 
    # @param task_name [String] the name of the task to be started.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def start_task(task_name, opts = {})
      start_task_with_http_info(task_name, opts)
      nil
    end

    # Start a single Butler task
    # This endpoint will attempt to start a single Butler task that is enabled in the settings. Butler tasks normally run automatically during a time window configured on the server&#39;s Settings page but can be manually started using this endpoint. Tasks will run with the following criteria: 1. Any tasks not scheduled to run on the current day will be skipped. 2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately. 3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window. 4. If we are outside the configured window, the task will start immediately. 
    # @param task_name [String] the name of the task to be started.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def start_task_with_http_info(task_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ButlerApi.start_task ...'
      end
      # verify the required parameter 'task_name' is set
      if @api_client.config.client_side_validation && task_name.nil?
        fail ArgumentError, "Missing the required parameter 'task_name' when calling ButlerApi.start_task"
      end
      # verify enum value
      allowable_values = ["BackupDatabase", "BuildGracenoteCollections", "CheckForUpdates", "CleanOldBundles", "CleanOldCacheFiles", "DeepMediaAnalysis", "GenerateAutoTags", "GenerateChapterThumbs", "GenerateMediaIndexFiles", "OptimizeDatabase", "RefreshLibraries", "RefreshLocalMedia", "RefreshPeriodicMetadata", "UpgradeMediaAnalysis"]
      if @api_client.config.client_side_validation && !allowable_values.include?(task_name)
        fail ArgumentError, "invalid value for \"task_name\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/butler/{taskName}'.sub('{' + 'taskName' + '}', CGI.escape(task_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"ButlerApi.start_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ButlerApi#start_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stop all Butler tasks
    # This endpoint will stop all currently running tasks and remove any scheduled tasks from the queue. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stop_all_tasks(opts = {})
      stop_all_tasks_with_http_info(opts)
      nil
    end

    # Stop all Butler tasks
    # This endpoint will stop all currently running tasks and remove any scheduled tasks from the queue. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stop_all_tasks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ButlerApi.stop_all_tasks ...'
      end
      # resource path
      local_var_path = '/butler'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"ButlerApi.stop_all_tasks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ButlerApi#stop_all_tasks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stop a single Butler task
    # This endpoint will stop a currently running task by name, or remove it from the list of scheduled tasks if it exists. See the section above for a list of task names for this endpoint. 
    # @param task_name [String] The name of the task to be started.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stop_task(task_name, opts = {})
      stop_task_with_http_info(task_name, opts)
      nil
    end

    # Stop a single Butler task
    # This endpoint will stop a currently running task by name, or remove it from the list of scheduled tasks if it exists. See the section above for a list of task names for this endpoint. 
    # @param task_name [String] The name of the task to be started.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stop_task_with_http_info(task_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ButlerApi.stop_task ...'
      end
      # verify the required parameter 'task_name' is set
      if @api_client.config.client_side_validation && task_name.nil?
        fail ArgumentError, "Missing the required parameter 'task_name' when calling ButlerApi.stop_task"
      end
      # verify enum value
      allowable_values = ["BackupDatabase", "BuildGracenoteCollections", "CheckForUpdates", "CleanOldBundles", "CleanOldCacheFiles", "DeepMediaAnalysis", "GenerateAutoTags", "GenerateChapterThumbs", "GenerateMediaIndexFiles", "OptimizeDatabase", "RefreshLibraries", "RefreshLocalMedia", "RefreshPeriodicMetadata", "UpgradeMediaAnalysis"]
      if @api_client.config.client_side_validation && !allowable_values.include?(task_name)
        fail ArgumentError, "invalid value for \"task_name\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/butler/{taskName}'.sub('{' + 'taskName' + '}', CGI.escape(task_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"ButlerApi.stop_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ButlerApi#stop_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
